syntax = "proto3";
package cyber.rank.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

import "cyber/rank/v1beta1/types.proto";
import "cyber/base/query/v1beta1/pagination.proto";

option go_package = "github.com/cybercongress/go-cyber/x/rank/types";
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;

service Query {
    rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
        option (google.api.http).get = "/cyber/rank/v1beta1/rank/params";
    }

    rpc Rank(QueryRankRequest) returns (QueryRankResponse) {
        option (google.api.http).get = "/cyber/rank/v1beta1/rank/rank/{cid}";
    }

    rpc Search(QuerySearchRequest) returns (QuerySearchResponse) {
        option (google.api.http).get = "/cyber/rank/v1beta1/rank/search/{cid}";
    }

    rpc Backlinks(QuerySearchRequest) returns (QuerySearchResponse) {
        option (google.api.http).get = "/cyber/rank/v1beta1/rank/backlinks/{cid}";
    }

    rpc Top(cyber.base.query.v1beta1.PageRequest) returns (QuerySearchResponse) {
        option (google.api.http).get = "/cyber/rank/v1beta1/rank/top";
    }

    rpc IsLinkExist(QueryIsLinkExistRequest) returns (QueryLinkExistResponse) {
        option (google.api.http).get = "/cyber/rank/v1beta1/is_link_exist";
    }

    rpc IsAnyLinkExist(QueryIsAnyLinkExistRequest) returns (QueryLinkExistResponse) {
        option (google.api.http).get = "/cyber/rank/v1beta1/is_any_link_exist";
    }

    rpc Entropy(QueryEntropyRequest) returns (QueryEntropyResponse) {
        option (google.api.http).get = "/cyber/rank/v1beta1/entropy/{cid}";
    }

    rpc Luminosity(QueryLuminosityRequest) returns (QueryLuminosityResponse) {
        option (google.api.http).get = "/cyber/rank/v1beta1/luminosity/{cid}";
    }

    rpc Karma(QueryKarmaRequest) returns (QueryKarmaResponse) {
        option (google.api.http).get = "/cyber/rank/v1beta1/karma/{address}";
    }

    rpc Karmas(QueryKarmasRequest) returns (QueryKarmasResponse) {
        option (google.api.http).get = "/cyber/rank/v1beta1/karmas";
    }
}

message QueryParamsRequest {}

message QueryParamsResponse{
    cyber.rank.v1beta1.Params params = 1 [(gogoproto.nullable) = false ];
}

message QueryRankRequest {
    string cid = 1;
}

message QueryRankResponse{
    uint64 rank = 1;
}

message QuerySearchRequest {
    string cid = 1;
    cyber.base.query.v1beta1.PageRequest pagination = 2;
}

message QuerySearchResponse {
    repeated RankedCid result                        = 1 [(gogoproto.nullable) = false];
    cyber.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryTopRequest {}

message QueryIsLinkExistRequest {
    string from    = 1;
    string to      = 2;
    string address = 3;
}

message QueryIsAnyLinkExistRequest {
    string from = 1;
    string to   = 2;
}

// FIXME move to bool...
message QueryLinkExistResponse {
    bool exist = 1;
}

message QueryEntropyRequest {
    string cid = 1;
}

message QueryEntropyResponse {
    uint64 entropy = 1;
}

message QueryLuminosityRequest {
    string cid = 1;
}

message QueryLuminosityResponse {
    uint64 luminosity = 1;
}

message QueryKarmaRequest {
    string address = 1;
}

message QueryKarmaResponse {
    uint64 karma = 1;
}

message QueryKarmasRequest {}

// TODO experimental and debug
message QueryKarmasResponse {
    map<string, uint64> karmas = 1;
}