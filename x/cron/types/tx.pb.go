// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cyber/cron/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAddJob struct {
	Program  string  `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Trigger  Trigger `protobuf:"bytes,2,opt,name=trigger,proto3" json:"trigger"`
	Load     Load    `protobuf:"bytes,3,opt,name=load,proto3" json:"load"`
	Label    string  `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	Particle string  `protobuf:"bytes,5,opt,name=particle,proto3" json:"particle,omitempty"`
}

func (m *MsgAddJob) Reset()         { *m = MsgAddJob{} }
func (m *MsgAddJob) String() string { return proto.CompactTextString(m) }
func (*MsgAddJob) ProtoMessage()    {}
func (*MsgAddJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{0}
}
func (m *MsgAddJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddJob.Merge(m, src)
}
func (m *MsgAddJob) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddJob) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddJob.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddJob proto.InternalMessageInfo

type MsgRemoveJob struct {
	Program string `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Label   string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *MsgRemoveJob) Reset()         { *m = MsgRemoveJob{} }
func (m *MsgRemoveJob) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveJob) ProtoMessage()    {}
func (*MsgRemoveJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{1}
}
func (m *MsgRemoveJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveJob.Merge(m, src)
}
func (m *MsgRemoveJob) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveJob) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveJob.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveJob proto.InternalMessageInfo

type MsgChangeJobParticle struct {
	Program  string `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Label    string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Particle string `protobuf:"bytes,3,opt,name=particle,proto3" json:"particle,omitempty"`
}

func (m *MsgChangeJobParticle) Reset()         { *m = MsgChangeJobParticle{} }
func (m *MsgChangeJobParticle) String() string { return proto.CompactTextString(m) }
func (*MsgChangeJobParticle) ProtoMessage()    {}
func (*MsgChangeJobParticle) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{2}
}
func (m *MsgChangeJobParticle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeJobParticle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeJobParticle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeJobParticle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeJobParticle.Merge(m, src)
}
func (m *MsgChangeJobParticle) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeJobParticle) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeJobParticle.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeJobParticle proto.InternalMessageInfo

type MsgChangeJobLabel struct {
	Program  string `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Label    string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	NewLabel string `protobuf:"bytes,3,opt,name=new_label,json=newLabel,proto3" json:"new_label,omitempty"`
}

func (m *MsgChangeJobLabel) Reset()         { *m = MsgChangeJobLabel{} }
func (m *MsgChangeJobLabel) String() string { return proto.CompactTextString(m) }
func (*MsgChangeJobLabel) ProtoMessage()    {}
func (*MsgChangeJobLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{3}
}
func (m *MsgChangeJobLabel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeJobLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeJobLabel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeJobLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeJobLabel.Merge(m, src)
}
func (m *MsgChangeJobLabel) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeJobLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeJobLabel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeJobLabel proto.InternalMessageInfo

type MsgChangeJobCallData struct {
	Program  string `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Label    string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	CallData string `protobuf:"bytes,3,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty"`
}

func (m *MsgChangeJobCallData) Reset()         { *m = MsgChangeJobCallData{} }
func (m *MsgChangeJobCallData) String() string { return proto.CompactTextString(m) }
func (*MsgChangeJobCallData) ProtoMessage()    {}
func (*MsgChangeJobCallData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{4}
}
func (m *MsgChangeJobCallData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeJobCallData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeJobCallData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeJobCallData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeJobCallData.Merge(m, src)
}
func (m *MsgChangeJobCallData) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeJobCallData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeJobCallData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeJobCallData proto.InternalMessageInfo

type MsgChangeJobGasPrice struct {
	Program  string                                  `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Label    string                                  `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	GasPrice github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"gas_price"`
}

func (m *MsgChangeJobGasPrice) Reset()         { *m = MsgChangeJobGasPrice{} }
func (m *MsgChangeJobGasPrice) String() string { return proto.CompactTextString(m) }
func (*MsgChangeJobGasPrice) ProtoMessage()    {}
func (*MsgChangeJobGasPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{5}
}
func (m *MsgChangeJobGasPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeJobGasPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeJobGasPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeJobGasPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeJobGasPrice.Merge(m, src)
}
func (m *MsgChangeJobGasPrice) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeJobGasPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeJobGasPrice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeJobGasPrice proto.InternalMessageInfo

type MsgChangeJobPeriod struct {
	Program string `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Label   string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Period  uint64 `protobuf:"varint,3,opt,name=period,proto3" json:"period,omitempty"`
}

func (m *MsgChangeJobPeriod) Reset()         { *m = MsgChangeJobPeriod{} }
func (m *MsgChangeJobPeriod) String() string { return proto.CompactTextString(m) }
func (*MsgChangeJobPeriod) ProtoMessage()    {}
func (*MsgChangeJobPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{6}
}
func (m *MsgChangeJobPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeJobPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeJobPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeJobPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeJobPeriod.Merge(m, src)
}
func (m *MsgChangeJobPeriod) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeJobPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeJobPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeJobPeriod proto.InternalMessageInfo

type MsgChangeJobBlock struct {
	Program string `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Label   string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Block   uint64 `protobuf:"varint,3,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *MsgChangeJobBlock) Reset()         { *m = MsgChangeJobBlock{} }
func (m *MsgChangeJobBlock) String() string { return proto.CompactTextString(m) }
func (*MsgChangeJobBlock) ProtoMessage()    {}
func (*MsgChangeJobBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{7}
}
func (m *MsgChangeJobBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeJobBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeJobBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeJobBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeJobBlock.Merge(m, src)
}
func (m *MsgChangeJobBlock) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeJobBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeJobBlock.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeJobBlock proto.InternalMessageInfo

type MsgAddJobResponse struct {
}

func (m *MsgAddJobResponse) Reset()         { *m = MsgAddJobResponse{} }
func (m *MsgAddJobResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddJobResponse) ProtoMessage()    {}
func (*MsgAddJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{8}
}
func (m *MsgAddJobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddJobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddJobResponse.Merge(m, src)
}
func (m *MsgAddJobResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddJobResponse proto.InternalMessageInfo

type MsgRemoveJobResponse struct {
}

func (m *MsgRemoveJobResponse) Reset()         { *m = MsgRemoveJobResponse{} }
func (m *MsgRemoveJobResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveJobResponse) ProtoMessage()    {}
func (*MsgRemoveJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{9}
}
func (m *MsgRemoveJobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveJobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveJobResponse.Merge(m, src)
}
func (m *MsgRemoveJobResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveJobResponse proto.InternalMessageInfo

type MsgChangeJobParticleResponse struct {
}

func (m *MsgChangeJobParticleResponse) Reset()         { *m = MsgChangeJobParticleResponse{} }
func (m *MsgChangeJobParticleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeJobParticleResponse) ProtoMessage()    {}
func (*MsgChangeJobParticleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{10}
}
func (m *MsgChangeJobParticleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeJobParticleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeJobParticleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeJobParticleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeJobParticleResponse.Merge(m, src)
}
func (m *MsgChangeJobParticleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeJobParticleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeJobParticleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeJobParticleResponse proto.InternalMessageInfo

type MsgChangeJobLabelResponse struct {
}

func (m *MsgChangeJobLabelResponse) Reset()         { *m = MsgChangeJobLabelResponse{} }
func (m *MsgChangeJobLabelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeJobLabelResponse) ProtoMessage()    {}
func (*MsgChangeJobLabelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{11}
}
func (m *MsgChangeJobLabelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeJobLabelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeJobLabelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeJobLabelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeJobLabelResponse.Merge(m, src)
}
func (m *MsgChangeJobLabelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeJobLabelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeJobLabelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeJobLabelResponse proto.InternalMessageInfo

type MsgChangeJobCallDataResponse struct {
}

func (m *MsgChangeJobCallDataResponse) Reset()         { *m = MsgChangeJobCallDataResponse{} }
func (m *MsgChangeJobCallDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeJobCallDataResponse) ProtoMessage()    {}
func (*MsgChangeJobCallDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{12}
}
func (m *MsgChangeJobCallDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeJobCallDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeJobCallDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeJobCallDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeJobCallDataResponse.Merge(m, src)
}
func (m *MsgChangeJobCallDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeJobCallDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeJobCallDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeJobCallDataResponse proto.InternalMessageInfo

type MsgChangeJobGasPriceResponse struct {
}

func (m *MsgChangeJobGasPriceResponse) Reset()         { *m = MsgChangeJobGasPriceResponse{} }
func (m *MsgChangeJobGasPriceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeJobGasPriceResponse) ProtoMessage()    {}
func (*MsgChangeJobGasPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{13}
}
func (m *MsgChangeJobGasPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeJobGasPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeJobGasPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeJobGasPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeJobGasPriceResponse.Merge(m, src)
}
func (m *MsgChangeJobGasPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeJobGasPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeJobGasPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeJobGasPriceResponse proto.InternalMessageInfo

type MsgChangeJobPeriodResponse struct {
}

func (m *MsgChangeJobPeriodResponse) Reset()         { *m = MsgChangeJobPeriodResponse{} }
func (m *MsgChangeJobPeriodResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeJobPeriodResponse) ProtoMessage()    {}
func (*MsgChangeJobPeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{14}
}
func (m *MsgChangeJobPeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeJobPeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeJobPeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeJobPeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeJobPeriodResponse.Merge(m, src)
}
func (m *MsgChangeJobPeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeJobPeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeJobPeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeJobPeriodResponse proto.InternalMessageInfo

type MsgChangeJobBlockResponse struct {
}

func (m *MsgChangeJobBlockResponse) Reset()         { *m = MsgChangeJobBlockResponse{} }
func (m *MsgChangeJobBlockResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeJobBlockResponse) ProtoMessage()    {}
func (*MsgChangeJobBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{15}
}
func (m *MsgChangeJobBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeJobBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeJobBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeJobBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeJobBlockResponse.Merge(m, src)
}
func (m *MsgChangeJobBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeJobBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeJobBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeJobBlockResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddJob)(nil), "cyber.cron.v1beta1.MsgAddJob")
	proto.RegisterType((*MsgRemoveJob)(nil), "cyber.cron.v1beta1.MsgRemoveJob")
	proto.RegisterType((*MsgChangeJobParticle)(nil), "cyber.cron.v1beta1.MsgChangeJobParticle")
	proto.RegisterType((*MsgChangeJobLabel)(nil), "cyber.cron.v1beta1.MsgChangeJobLabel")
	proto.RegisterType((*MsgChangeJobCallData)(nil), "cyber.cron.v1beta1.MsgChangeJobCallData")
	proto.RegisterType((*MsgChangeJobGasPrice)(nil), "cyber.cron.v1beta1.MsgChangeJobGasPrice")
	proto.RegisterType((*MsgChangeJobPeriod)(nil), "cyber.cron.v1beta1.MsgChangeJobPeriod")
	proto.RegisterType((*MsgChangeJobBlock)(nil), "cyber.cron.v1beta1.MsgChangeJobBlock")
	proto.RegisterType((*MsgAddJobResponse)(nil), "cyber.cron.v1beta1.MsgAddJobResponse")
	proto.RegisterType((*MsgRemoveJobResponse)(nil), "cyber.cron.v1beta1.MsgRemoveJobResponse")
	proto.RegisterType((*MsgChangeJobParticleResponse)(nil), "cyber.cron.v1beta1.MsgChangeJobParticleResponse")
	proto.RegisterType((*MsgChangeJobLabelResponse)(nil), "cyber.cron.v1beta1.MsgChangeJobLabelResponse")
	proto.RegisterType((*MsgChangeJobCallDataResponse)(nil), "cyber.cron.v1beta1.MsgChangeJobCallDataResponse")
	proto.RegisterType((*MsgChangeJobGasPriceResponse)(nil), "cyber.cron.v1beta1.MsgChangeJobGasPriceResponse")
	proto.RegisterType((*MsgChangeJobPeriodResponse)(nil), "cyber.cron.v1beta1.MsgChangeJobPeriodResponse")
	proto.RegisterType((*MsgChangeJobBlockResponse)(nil), "cyber.cron.v1beta1.MsgChangeJobBlockResponse")
}

func init() { proto.RegisterFile("cyber/cron/v1beta1/tx.proto", fileDescriptor_e3ac466c209dfdea) }

var fileDescriptor_e3ac466c209dfdea = []byte{
	// 685 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x4e, 0xd4, 0x40,
	0x14, 0xde, 0xc2, 0xb2, 0xb0, 0x47, 0xa3, 0xa1, 0x6e, 0x48, 0xe9, 0x62, 0x21, 0x4d, 0x50, 0x6e,
	0x68, 0x05, 0x2f, 0x4d, 0x4c, 0x5c, 0x4c, 0x4c, 0x0c, 0x6b, 0xc8, 0xc6, 0xc4, 0x68, 0x4c, 0x70,
	0xda, 0x8e, 0x43, 0x43, 0xb7, 0xd3, 0x74, 0x2a, 0x3f, 0x6f, 0xe1, 0x63, 0x78, 0xe7, 0x0b, 0xf8,
	0x00, 0x7b, 0xc9, 0xa5, 0x57, 0x44, 0x97, 0xb7, 0xf0, 0xca, 0x74, 0x66, 0x3a, 0xd2, 0xfd, 0xa1,
	0xac, 0x57, 0x30, 0xfb, 0xfd, 0x9c, 0x99, 0x39, 0x5f, 0x4f, 0x06, 0xda, 0xfe, 0xb9, 0x87, 0x53,
	0xd7, 0x4f, 0x69, 0xec, 0x9e, 0xec, 0x78, 0x38, 0x43, 0x3b, 0x6e, 0x76, 0xe6, 0x24, 0x29, 0xcd,
	0xa8, 0xae, 0x73, 0xd0, 0xc9, 0x41, 0x47, 0x82, 0x66, 0x8b, 0x50, 0x42, 0x39, 0xec, 0xe6, 0xff,
	0x09, 0xa6, 0x69, 0x4d, 0xb2, 0x39, 0x4f, 0x30, 0x53, 0x38, 0x65, 0x7d, 0xca, 0x5c, 0x0f, 0x31,
	0xac, 0x08, 0x3e, 0x0d, 0x63, 0x81, 0xdb, 0x03, 0x0d, 0x9a, 0x5d, 0x46, 0x5e, 0x04, 0xc1, 0x6b,
	0xea, 0xe9, 0x06, 0x2c, 0x26, 0x29, 0x25, 0x29, 0xea, 0x1b, 0xda, 0x86, 0xb6, 0xd5, 0xec, 0x15,
	0x4b, 0xfd, 0x19, 0x2c, 0x66, 0x69, 0x48, 0x08, 0x4e, 0x8d, 0xb9, 0x0d, 0x6d, 0xeb, 0xce, 0x6e,
	0xdb, 0x19, 0xdf, 0xa3, 0xf3, 0x56, 0x50, 0x3a, 0xf5, 0xc1, 0xe5, 0x7a, 0xad, 0x57, 0x28, 0xf4,
	0x5d, 0xa8, 0x47, 0x14, 0x05, 0xc6, 0x3c, 0x57, 0x1a, 0x93, 0x94, 0xfb, 0x14, 0x05, 0x52, 0xc6,
	0xb9, 0x7a, 0x0b, 0x16, 0x22, 0xe4, 0xe1, 0xc8, 0xa8, 0xf3, 0x8d, 0x88, 0x85, 0x6e, 0xc2, 0x52,
	0x82, 0xd2, 0x2c, 0xf4, 0x23, 0x6c, 0x2c, 0x70, 0x40, 0xad, 0xed, 0xe7, 0x70, 0xb7, 0xcb, 0x48,
	0x0f, 0xf7, 0xe9, 0x09, 0xbe, 0xf9, 0x30, 0xca, 0x7b, 0xee, 0x9a, 0xb7, 0xed, 0x41, 0xab, 0xcb,
	0xc8, 0xde, 0x11, 0x8a, 0x49, 0xae, 0x3f, 0x90, 0xbe, 0xb3, 0xfa, 0x94, 0xf6, 0x38, 0x3f, 0xb2,
	0xc7, 0x4f, 0xb0, 0x7c, 0xbd, 0xc6, 0x3e, 0x17, 0xcc, 0x5a, 0xa0, 0x0d, 0xcd, 0x18, 0x9f, 0x1e,
	0x0a, 0x44, 0x56, 0x88, 0xf1, 0x29, 0x37, 0xb3, 0xfd, 0xf2, 0x29, 0xf6, 0x50, 0x14, 0xbd, 0x44,
	0x19, 0xfa, 0x9f, 0x22, 0x3e, 0x8a, 0xa2, 0xc3, 0x00, 0x65, 0xa8, 0x28, 0xe2, 0x4b, 0x33, 0xfb,
	0xbb, 0x56, 0xae, 0xf2, 0x0a, 0xb1, 0x83, 0x34, 0xf4, 0x67, 0xbf, 0x2b, 0x02, 0x4d, 0x82, 0xd8,
	0x61, 0x92, 0x8b, 0x65, 0x3c, 0x56, 0x1d, 0x11, 0x59, 0x27, 0x8f, 0xac, 0xca, 0xc7, 0x1e, 0x0d,
	0xe3, 0x8e, 0x9b, 0xe7, 0xe3, 0xcf, 0xe5, 0xfa, 0x63, 0x12, 0x66, 0x47, 0x5f, 0x3c, 0xc7, 0xa7,
	0x7d, 0x57, 0xe6, 0x5b, 0xfc, 0xd9, 0x66, 0xc1, 0xb1, 0x8c, 0x7f, 0x2e, 0xe8, 0x2d, 0x11, 0xb9,
	0x31, 0xfb, 0x23, 0xe8, 0xa5, 0xe6, 0xe2, 0x34, 0xa4, 0xc1, 0xcc, 0xdb, 0x5d, 0x81, 0x46, 0xc2,
	0x95, 0x7c, 0xaf, 0xf5, 0x9e, 0x5c, 0xd9, 0xef, 0xcb, 0x6d, 0xed, 0x44, 0xd4, 0x3f, 0x9e, 0xd9,
	0xbc, 0x05, 0x0b, 0x5e, 0x2e, 0x94, 0xde, 0x62, 0x61, 0x3f, 0xe0, 0xd6, 0xe2, 0xfb, 0xec, 0x61,
	0x96, 0xd0, 0x98, 0x61, 0x7b, 0x85, 0x5f, 0xbf, 0x8a, 0xba, 0xfa, 0xdd, 0x82, 0xb5, 0x49, 0x11,
	0x56, 0x78, 0x1b, 0x56, 0xc7, 0xe2, 0x37, 0x4d, 0x5c, 0x24, 0x67, 0x1a, 0x5e, 0xf4, 0x5c, 0xe1,
	0x6b, 0x60, 0x8e, 0x5f, 0xf1, 0xb4, 0xd2, 0xfc, 0x8a, 0x0a, 0x70, 0xf7, 0x47, 0x03, 0xe6, 0xbb,
	0x8c, 0xe8, 0x6f, 0xa0, 0x21, 0x27, 0xd1, 0xc3, 0x49, 0x43, 0x42, 0x5d, 0x84, 0xb9, 0x79, 0x23,
	0x5c, 0xf8, 0xea, 0xef, 0xa0, 0xf9, 0x6f, 0x1e, 0x6c, 0x4c, 0xd1, 0x28, 0x86, 0xb9, 0x55, 0xc5,
	0x50, 0xc6, 0x14, 0x96, 0xc7, 0x07, 0xc5, 0x34, 0xf9, 0x18, 0xd3, 0x7c, 0x72, 0x5b, 0xa6, 0x2a,
	0xf8, 0x19, 0xee, 0x8d, 0x4c, 0x8d, 0xcd, 0x2a, 0x0f, 0x4e, 0x33, 0xb7, 0x6f, 0x45, 0x9b, 0x78,
	0x30, 0x35, 0x3b, 0x2a, 0x0f, 0x56, 0x30, 0xab, 0x0f, 0x36, 0x9a, 0xaa, 0x52, 0x41, 0x35, 0x46,
	0x2a, 0x0b, 0x16, 0xcc, 0xea, 0x82, 0xa3, 0x31, 0xd5, 0x43, 0xb8, 0x3f, 0x3a, 0x06, 0x1e, 0x55,
	0xb6, 0x83, 0xf3, 0x4c, 0xe7, 0x76, 0xbc, 0x89, 0x4d, 0x13, 0x33, 0xa1, 0xb2, 0x69, 0x9c, 0x56,
	0xdd, 0xb4, 0xd2, 0xe7, 0xd3, 0x39, 0x18, 0xfc, 0xb6, 0x6a, 0xdf, 0x86, 0x56, 0x6d, 0x30, 0xb4,
	0xb4, 0x8b, 0xa1, 0xa5, 0xfd, 0x1a, 0x5a, 0xda, 0xd7, 0x2b, 0xab, 0x76, 0x71, 0x65, 0xd5, 0x7e,
	0x5e, 0x59, 0xb5, 0x0f, 0xce, 0xf5, 0x89, 0x99, 0x5b, 0xfb, 0x34, 0x26, 0x29, 0x66, 0xcc, 0x25,
	0x74, 0x5b, 0x3c, 0x21, 0xce, 0xc4, 0x23, 0x82, 0x4f, 0x4f, 0xaf, 0xc1, 0x5f, 0x07, 0x4f, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0xec, 0x93, 0xa3, 0x6f, 0xa6, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AddJob(ctx context.Context, in *MsgAddJob, opts ...grpc.CallOption) (*MsgAddJobResponse, error)
	RemoveJob(ctx context.Context, in *MsgRemoveJob, opts ...grpc.CallOption) (*MsgRemoveJobResponse, error)
	ChangeJobParticle(ctx context.Context, in *MsgChangeJobParticle, opts ...grpc.CallOption) (*MsgChangeJobParticleResponse, error)
	ChangeJobLabel(ctx context.Context, in *MsgChangeJobLabel, opts ...grpc.CallOption) (*MsgChangeJobLabelResponse, error)
	ChangeJobCallData(ctx context.Context, in *MsgChangeJobCallData, opts ...grpc.CallOption) (*MsgChangeJobCallDataResponse, error)
	ChangeJobGasPrice(ctx context.Context, in *MsgChangeJobGasPrice, opts ...grpc.CallOption) (*MsgChangeJobGasPriceResponse, error)
	ChangeJobPeriod(ctx context.Context, in *MsgChangeJobPeriod, opts ...grpc.CallOption) (*MsgChangeJobPeriodResponse, error)
	ChangeJobBlock(ctx context.Context, in *MsgChangeJobBlock, opts ...grpc.CallOption) (*MsgChangeJobBlockResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddJob(ctx context.Context, in *MsgAddJob, opts ...grpc.CallOption) (*MsgAddJobResponse, error) {
	out := new(MsgAddJobResponse)
	err := c.cc.Invoke(ctx, "/cyber.cron.v1beta1.Msg/AddJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveJob(ctx context.Context, in *MsgRemoveJob, opts ...grpc.CallOption) (*MsgRemoveJobResponse, error) {
	out := new(MsgRemoveJobResponse)
	err := c.cc.Invoke(ctx, "/cyber.cron.v1beta1.Msg/RemoveJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeJobParticle(ctx context.Context, in *MsgChangeJobParticle, opts ...grpc.CallOption) (*MsgChangeJobParticleResponse, error) {
	out := new(MsgChangeJobParticleResponse)
	err := c.cc.Invoke(ctx, "/cyber.cron.v1beta1.Msg/ChangeJobParticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeJobLabel(ctx context.Context, in *MsgChangeJobLabel, opts ...grpc.CallOption) (*MsgChangeJobLabelResponse, error) {
	out := new(MsgChangeJobLabelResponse)
	err := c.cc.Invoke(ctx, "/cyber.cron.v1beta1.Msg/ChangeJobLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeJobCallData(ctx context.Context, in *MsgChangeJobCallData, opts ...grpc.CallOption) (*MsgChangeJobCallDataResponse, error) {
	out := new(MsgChangeJobCallDataResponse)
	err := c.cc.Invoke(ctx, "/cyber.cron.v1beta1.Msg/ChangeJobCallData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeJobGasPrice(ctx context.Context, in *MsgChangeJobGasPrice, opts ...grpc.CallOption) (*MsgChangeJobGasPriceResponse, error) {
	out := new(MsgChangeJobGasPriceResponse)
	err := c.cc.Invoke(ctx, "/cyber.cron.v1beta1.Msg/ChangeJobGasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeJobPeriod(ctx context.Context, in *MsgChangeJobPeriod, opts ...grpc.CallOption) (*MsgChangeJobPeriodResponse, error) {
	out := new(MsgChangeJobPeriodResponse)
	err := c.cc.Invoke(ctx, "/cyber.cron.v1beta1.Msg/ChangeJobPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeJobBlock(ctx context.Context, in *MsgChangeJobBlock, opts ...grpc.CallOption) (*MsgChangeJobBlockResponse, error) {
	out := new(MsgChangeJobBlockResponse)
	err := c.cc.Invoke(ctx, "/cyber.cron.v1beta1.Msg/ChangeJobBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AddJob(context.Context, *MsgAddJob) (*MsgAddJobResponse, error)
	RemoveJob(context.Context, *MsgRemoveJob) (*MsgRemoveJobResponse, error)
	ChangeJobParticle(context.Context, *MsgChangeJobParticle) (*MsgChangeJobParticleResponse, error)
	ChangeJobLabel(context.Context, *MsgChangeJobLabel) (*MsgChangeJobLabelResponse, error)
	ChangeJobCallData(context.Context, *MsgChangeJobCallData) (*MsgChangeJobCallDataResponse, error)
	ChangeJobGasPrice(context.Context, *MsgChangeJobGasPrice) (*MsgChangeJobGasPriceResponse, error)
	ChangeJobPeriod(context.Context, *MsgChangeJobPeriod) (*MsgChangeJobPeriodResponse, error)
	ChangeJobBlock(context.Context, *MsgChangeJobBlock) (*MsgChangeJobBlockResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddJob(ctx context.Context, req *MsgAddJob) (*MsgAddJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJob not implemented")
}
func (*UnimplementedMsgServer) RemoveJob(ctx context.Context, req *MsgRemoveJob) (*MsgRemoveJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveJob not implemented")
}
func (*UnimplementedMsgServer) ChangeJobParticle(ctx context.Context, req *MsgChangeJobParticle) (*MsgChangeJobParticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeJobParticle not implemented")
}
func (*UnimplementedMsgServer) ChangeJobLabel(ctx context.Context, req *MsgChangeJobLabel) (*MsgChangeJobLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeJobLabel not implemented")
}
func (*UnimplementedMsgServer) ChangeJobCallData(ctx context.Context, req *MsgChangeJobCallData) (*MsgChangeJobCallDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeJobCallData not implemented")
}
func (*UnimplementedMsgServer) ChangeJobGasPrice(ctx context.Context, req *MsgChangeJobGasPrice) (*MsgChangeJobGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeJobGasPrice not implemented")
}
func (*UnimplementedMsgServer) ChangeJobPeriod(ctx context.Context, req *MsgChangeJobPeriod) (*MsgChangeJobPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeJobPeriod not implemented")
}
func (*UnimplementedMsgServer) ChangeJobBlock(ctx context.Context, req *MsgChangeJobBlock) (*MsgChangeJobBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeJobBlock not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.cron.v1beta1.Msg/AddJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddJob(ctx, req.(*MsgAddJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.cron.v1beta1.Msg/RemoveJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveJob(ctx, req.(*MsgRemoveJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeJobParticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeJobParticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeJobParticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.cron.v1beta1.Msg/ChangeJobParticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeJobParticle(ctx, req.(*MsgChangeJobParticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeJobLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeJobLabel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeJobLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.cron.v1beta1.Msg/ChangeJobLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeJobLabel(ctx, req.(*MsgChangeJobLabel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeJobCallData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeJobCallData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeJobCallData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.cron.v1beta1.Msg/ChangeJobCallData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeJobCallData(ctx, req.(*MsgChangeJobCallData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeJobGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeJobGasPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeJobGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.cron.v1beta1.Msg/ChangeJobGasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeJobGasPrice(ctx, req.(*MsgChangeJobGasPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeJobPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeJobPeriod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeJobPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.cron.v1beta1.Msg/ChangeJobPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeJobPeriod(ctx, req.(*MsgChangeJobPeriod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeJobBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeJobBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeJobBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.cron.v1beta1.Msg/ChangeJobBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeJobBlock(ctx, req.(*MsgChangeJobBlock))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cyber.cron.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddJob",
			Handler:    _Msg_AddJob_Handler,
		},
		{
			MethodName: "RemoveJob",
			Handler:    _Msg_RemoveJob_Handler,
		},
		{
			MethodName: "ChangeJobParticle",
			Handler:    _Msg_ChangeJobParticle_Handler,
		},
		{
			MethodName: "ChangeJobLabel",
			Handler:    _Msg_ChangeJobLabel_Handler,
		},
		{
			MethodName: "ChangeJobCallData",
			Handler:    _Msg_ChangeJobCallData_Handler,
		},
		{
			MethodName: "ChangeJobGasPrice",
			Handler:    _Msg_ChangeJobGasPrice_Handler,
		},
		{
			MethodName: "ChangeJobPeriod",
			Handler:    _Msg_ChangeJobPeriod_Handler,
		},
		{
			MethodName: "ChangeJobBlock",
			Handler:    _Msg_ChangeJobBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cyber/cron/v1beta1/tx.proto",
}

func (m *MsgAddJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Particle) > 0 {
		i -= len(m.Particle)
		copy(dAtA[i:], m.Particle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Particle)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Load.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Trigger.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeJobParticle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeJobParticle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeJobParticle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Particle) > 0 {
		i -= len(m.Particle)
		copy(dAtA[i:], m.Particle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Particle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeJobLabel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeJobLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeJobLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewLabel) > 0 {
		i -= len(m.NewLabel)
		copy(dAtA[i:], m.NewLabel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewLabel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeJobCallData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeJobCallData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeJobCallData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CallData) > 0 {
		i -= len(m.CallData)
		copy(dAtA[i:], m.CallData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CallData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeJobGasPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeJobGasPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeJobGasPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GasPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeJobPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeJobPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeJobPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Period != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeJobBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeJobBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeJobBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddJobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddJobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddJobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveJobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveJobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveJobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeJobParticleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeJobParticleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeJobParticleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeJobLabelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeJobLabelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeJobLabelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeJobCallDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeJobCallDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeJobCallDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeJobGasPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeJobGasPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeJobGasPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeJobPeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeJobPeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeJobPeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeJobBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeJobBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeJobBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Trigger.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Load.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Particle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangeJobParticle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Particle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangeJobLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewLabel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangeJobCallData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CallData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangeJobGasPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.GasPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgChangeJobPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Period != 0 {
		n += 1 + sovTx(uint64(m.Period))
	}
	return n
}

func (m *MsgChangeJobBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Block != 0 {
		n += 1 + sovTx(uint64(m.Block))
	}
	return n
}

func (m *MsgAddJobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveJobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeJobParticleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeJobLabelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeJobCallDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeJobGasPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeJobPeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeJobBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trigger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Trigger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Load.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Particle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Particle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeJobParticle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeJobParticle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeJobParticle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Particle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Particle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeJobLabel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeJobLabel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeJobLabel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeJobCallData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeJobCallData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeJobCallData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeJobGasPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeJobGasPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeJobGasPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeJobPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeJobPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeJobPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeJobBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeJobBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeJobBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddJobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddJobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddJobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveJobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveJobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveJobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeJobParticleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeJobParticleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeJobParticleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeJobLabelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeJobLabelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeJobLabelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeJobCallDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeJobCallDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeJobCallDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeJobGasPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeJobGasPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeJobGasPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeJobPeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeJobPeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeJobPeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeJobBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeJobBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeJobBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
