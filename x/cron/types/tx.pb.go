// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cyber/cron/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCronAddJob struct {
	Creator  string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator" yaml:"creator"`
	Contract string   `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract" yaml:"contract"`
	Trigger  *Trigger `protobuf:"bytes,3,opt,name=trigger,proto3" json:"trigger" yaml:"trigger"`
	Load     *Load    `protobuf:"bytes,4,opt,name=load,proto3" json:"load" yaml:"load"`
	Label    string   `protobuf:"bytes,5,opt,name=label,proto3" json:"label" yaml:"label"`
	Cid      string   `protobuf:"bytes,6,opt,name=cid,proto3" json:"cid" yaml:"cid"`
}

func (m *MsgCronAddJob) Reset()         { *m = MsgCronAddJob{} }
func (m *MsgCronAddJob) String() string { return proto.CompactTextString(m) }
func (*MsgCronAddJob) ProtoMessage()    {}
func (*MsgCronAddJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{0}
}
func (m *MsgCronAddJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCronAddJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCronAddJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCronAddJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCronAddJob.Merge(m, src)
}
func (m *MsgCronAddJob) XXX_Size() int {
	return m.Size()
}
func (m *MsgCronAddJob) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCronAddJob.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCronAddJob proto.InternalMessageInfo

type MsgCronRemoveJob struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator" yaml:"creator"`
	Contract string `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract" yaml:"contract"`
	Label    string `protobuf:"bytes,3,opt,name=label,proto3" json:"label" yaml:"label"`
}

func (m *MsgCronRemoveJob) Reset()         { *m = MsgCronRemoveJob{} }
func (m *MsgCronRemoveJob) String() string { return proto.CompactTextString(m) }
func (*MsgCronRemoveJob) ProtoMessage()    {}
func (*MsgCronRemoveJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{1}
}
func (m *MsgCronRemoveJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCronRemoveJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCronRemoveJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCronRemoveJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCronRemoveJob.Merge(m, src)
}
func (m *MsgCronRemoveJob) XXX_Size() int {
	return m.Size()
}
func (m *MsgCronRemoveJob) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCronRemoveJob.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCronRemoveJob proto.InternalMessageInfo

type MsgCronChangeJobCID struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator" yaml:"creator"`
	Contract string `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract" yaml:"contract"`
	Label    string `protobuf:"bytes,3,opt,name=label,proto3" json:"label" yaml:"label"`
	Cid      string `protobuf:"bytes,4,opt,name=cid,proto3" json:"cid" yaml:"cid"`
}

func (m *MsgCronChangeJobCID) Reset()         { *m = MsgCronChangeJobCID{} }
func (m *MsgCronChangeJobCID) String() string { return proto.CompactTextString(m) }
func (*MsgCronChangeJobCID) ProtoMessage()    {}
func (*MsgCronChangeJobCID) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{2}
}
func (m *MsgCronChangeJobCID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCronChangeJobCID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCronChangeJobCID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCronChangeJobCID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCronChangeJobCID.Merge(m, src)
}
func (m *MsgCronChangeJobCID) XXX_Size() int {
	return m.Size()
}
func (m *MsgCronChangeJobCID) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCronChangeJobCID.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCronChangeJobCID proto.InternalMessageInfo

type MsgCronChangeJobLabel struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator" yaml:"creator"`
	Contract string `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract" yaml:"contract"`
	Label    string `protobuf:"bytes,3,opt,name=label,proto3" json:"label" yaml:"label"`
	NewLabel string `protobuf:"bytes,4,opt,name=new_label,json=newLabel,proto3" json:"new_label" yaml:"new_label"`
}

func (m *MsgCronChangeJobLabel) Reset()         { *m = MsgCronChangeJobLabel{} }
func (m *MsgCronChangeJobLabel) String() string { return proto.CompactTextString(m) }
func (*MsgCronChangeJobLabel) ProtoMessage()    {}
func (*MsgCronChangeJobLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{3}
}
func (m *MsgCronChangeJobLabel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCronChangeJobLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCronChangeJobLabel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCronChangeJobLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCronChangeJobLabel.Merge(m, src)
}
func (m *MsgCronChangeJobLabel) XXX_Size() int {
	return m.Size()
}
func (m *MsgCronChangeJobLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCronChangeJobLabel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCronChangeJobLabel proto.InternalMessageInfo

type MsgCronChangeJobCallData struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator" yaml:"creator"`
	Contract string `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract" yaml:"contract"`
	Label    string `protobuf:"bytes,3,opt,name=label,proto3" json:"label" yaml:"label"`
	CallData string `protobuf:"bytes,4,opt,name=call_data,json=callData,proto3" json:"call_data" yaml:"call_data"`
}

func (m *MsgCronChangeJobCallData) Reset()         { *m = MsgCronChangeJobCallData{} }
func (m *MsgCronChangeJobCallData) String() string { return proto.CompactTextString(m) }
func (*MsgCronChangeJobCallData) ProtoMessage()    {}
func (*MsgCronChangeJobCallData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{4}
}
func (m *MsgCronChangeJobCallData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCronChangeJobCallData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCronChangeJobCallData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCronChangeJobCallData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCronChangeJobCallData.Merge(m, src)
}
func (m *MsgCronChangeJobCallData) XXX_Size() int {
	return m.Size()
}
func (m *MsgCronChangeJobCallData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCronChangeJobCallData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCronChangeJobCallData proto.InternalMessageInfo

type MsgCronChangeJobGasPrice struct {
	Creator  string                                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator" yaml:"creator"`
	Contract string                                  `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract" yaml:"contract"`
	Label    string                                  `protobuf:"bytes,3,opt,name=label,proto3" json:"label" yaml:"label"`
	GasPrice github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=gas_price,json=gasPrice,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"gas_price" yaml:"gas_price"`
}

func (m *MsgCronChangeJobGasPrice) Reset()         { *m = MsgCronChangeJobGasPrice{} }
func (m *MsgCronChangeJobGasPrice) String() string { return proto.CompactTextString(m) }
func (*MsgCronChangeJobGasPrice) ProtoMessage()    {}
func (*MsgCronChangeJobGasPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{5}
}
func (m *MsgCronChangeJobGasPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCronChangeJobGasPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCronChangeJobGasPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCronChangeJobGasPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCronChangeJobGasPrice.Merge(m, src)
}
func (m *MsgCronChangeJobGasPrice) XXX_Size() int {
	return m.Size()
}
func (m *MsgCronChangeJobGasPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCronChangeJobGasPrice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCronChangeJobGasPrice proto.InternalMessageInfo

type MsgCronChangeJobPeriod struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator" yaml:"creator"`
	Contract string `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract" yaml:"contract"`
	Label    string `protobuf:"bytes,3,opt,name=label,proto3" json:"label" yaml:"label"`
	Period   uint64 `protobuf:"varint,4,opt,name=period,proto3" json:"period" yaml:"period"`
}

func (m *MsgCronChangeJobPeriod) Reset()         { *m = MsgCronChangeJobPeriod{} }
func (m *MsgCronChangeJobPeriod) String() string { return proto.CompactTextString(m) }
func (*MsgCronChangeJobPeriod) ProtoMessage()    {}
func (*MsgCronChangeJobPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{6}
}
func (m *MsgCronChangeJobPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCronChangeJobPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCronChangeJobPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCronChangeJobPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCronChangeJobPeriod.Merge(m, src)
}
func (m *MsgCronChangeJobPeriod) XXX_Size() int {
	return m.Size()
}
func (m *MsgCronChangeJobPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCronChangeJobPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCronChangeJobPeriod proto.InternalMessageInfo

type MsgCronChangeJobBlock struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator" yaml:"creator"`
	Contract string `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract" yaml:"contract"`
	Label    string `protobuf:"bytes,3,opt,name=label,proto3" json:"label" yaml:"label"`
	Block    uint64 `protobuf:"varint,4,opt,name=block,proto3" json:"block" yaml:"block"`
}

func (m *MsgCronChangeJobBlock) Reset()         { *m = MsgCronChangeJobBlock{} }
func (m *MsgCronChangeJobBlock) String() string { return proto.CompactTextString(m) }
func (*MsgCronChangeJobBlock) ProtoMessage()    {}
func (*MsgCronChangeJobBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{7}
}
func (m *MsgCronChangeJobBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCronChangeJobBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCronChangeJobBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCronChangeJobBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCronChangeJobBlock.Merge(m, src)
}
func (m *MsgCronChangeJobBlock) XXX_Size() int {
	return m.Size()
}
func (m *MsgCronChangeJobBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCronChangeJobBlock.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCronChangeJobBlock proto.InternalMessageInfo

type MsgCronAddJobResponse struct {
}

func (m *MsgCronAddJobResponse) Reset()         { *m = MsgCronAddJobResponse{} }
func (m *MsgCronAddJobResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCronAddJobResponse) ProtoMessage()    {}
func (*MsgCronAddJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{8}
}
func (m *MsgCronAddJobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCronAddJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCronAddJobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCronAddJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCronAddJobResponse.Merge(m, src)
}
func (m *MsgCronAddJobResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCronAddJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCronAddJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCronAddJobResponse proto.InternalMessageInfo

type MsgCronRemoveJobResponse struct {
}

func (m *MsgCronRemoveJobResponse) Reset()         { *m = MsgCronRemoveJobResponse{} }
func (m *MsgCronRemoveJobResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCronRemoveJobResponse) ProtoMessage()    {}
func (*MsgCronRemoveJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{9}
}
func (m *MsgCronRemoveJobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCronRemoveJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCronRemoveJobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCronRemoveJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCronRemoveJobResponse.Merge(m, src)
}
func (m *MsgCronRemoveJobResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCronRemoveJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCronRemoveJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCronRemoveJobResponse proto.InternalMessageInfo

type MsgCronChangeJobCIDResponse struct {
}

func (m *MsgCronChangeJobCIDResponse) Reset()         { *m = MsgCronChangeJobCIDResponse{} }
func (m *MsgCronChangeJobCIDResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCronChangeJobCIDResponse) ProtoMessage()    {}
func (*MsgCronChangeJobCIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{10}
}
func (m *MsgCronChangeJobCIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCronChangeJobCIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCronChangeJobCIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCronChangeJobCIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCronChangeJobCIDResponse.Merge(m, src)
}
func (m *MsgCronChangeJobCIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCronChangeJobCIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCronChangeJobCIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCronChangeJobCIDResponse proto.InternalMessageInfo

type MsgCronChangeJobLabelResponse struct {
}

func (m *MsgCronChangeJobLabelResponse) Reset()         { *m = MsgCronChangeJobLabelResponse{} }
func (m *MsgCronChangeJobLabelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCronChangeJobLabelResponse) ProtoMessage()    {}
func (*MsgCronChangeJobLabelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{11}
}
func (m *MsgCronChangeJobLabelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCronChangeJobLabelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCronChangeJobLabelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCronChangeJobLabelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCronChangeJobLabelResponse.Merge(m, src)
}
func (m *MsgCronChangeJobLabelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCronChangeJobLabelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCronChangeJobLabelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCronChangeJobLabelResponse proto.InternalMessageInfo

type MsgCronChangeJobCallDataResponse struct {
}

func (m *MsgCronChangeJobCallDataResponse) Reset()         { *m = MsgCronChangeJobCallDataResponse{} }
func (m *MsgCronChangeJobCallDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCronChangeJobCallDataResponse) ProtoMessage()    {}
func (*MsgCronChangeJobCallDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{12}
}
func (m *MsgCronChangeJobCallDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCronChangeJobCallDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCronChangeJobCallDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCronChangeJobCallDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCronChangeJobCallDataResponse.Merge(m, src)
}
func (m *MsgCronChangeJobCallDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCronChangeJobCallDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCronChangeJobCallDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCronChangeJobCallDataResponse proto.InternalMessageInfo

type MsgCronChangeJobGasPriceResponse struct {
}

func (m *MsgCronChangeJobGasPriceResponse) Reset()         { *m = MsgCronChangeJobGasPriceResponse{} }
func (m *MsgCronChangeJobGasPriceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCronChangeJobGasPriceResponse) ProtoMessage()    {}
func (*MsgCronChangeJobGasPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{13}
}
func (m *MsgCronChangeJobGasPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCronChangeJobGasPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCronChangeJobGasPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCronChangeJobGasPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCronChangeJobGasPriceResponse.Merge(m, src)
}
func (m *MsgCronChangeJobGasPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCronChangeJobGasPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCronChangeJobGasPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCronChangeJobGasPriceResponse proto.InternalMessageInfo

type MsgCronChangeJobPeriodResponse struct {
}

func (m *MsgCronChangeJobPeriodResponse) Reset()         { *m = MsgCronChangeJobPeriodResponse{} }
func (m *MsgCronChangeJobPeriodResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCronChangeJobPeriodResponse) ProtoMessage()    {}
func (*MsgCronChangeJobPeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{14}
}
func (m *MsgCronChangeJobPeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCronChangeJobPeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCronChangeJobPeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCronChangeJobPeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCronChangeJobPeriodResponse.Merge(m, src)
}
func (m *MsgCronChangeJobPeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCronChangeJobPeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCronChangeJobPeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCronChangeJobPeriodResponse proto.InternalMessageInfo

type MsgCronChangeJobBlockResponse struct {
}

func (m *MsgCronChangeJobBlockResponse) Reset()         { *m = MsgCronChangeJobBlockResponse{} }
func (m *MsgCronChangeJobBlockResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCronChangeJobBlockResponse) ProtoMessage()    {}
func (*MsgCronChangeJobBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ac466c209dfdea, []int{15}
}
func (m *MsgCronChangeJobBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCronChangeJobBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCronChangeJobBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCronChangeJobBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCronChangeJobBlockResponse.Merge(m, src)
}
func (m *MsgCronChangeJobBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCronChangeJobBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCronChangeJobBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCronChangeJobBlockResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCronAddJob)(nil), "cyber.cron.v1beta1.MsgCronAddJob")
	proto.RegisterType((*MsgCronRemoveJob)(nil), "cyber.cron.v1beta1.MsgCronRemoveJob")
	proto.RegisterType((*MsgCronChangeJobCID)(nil), "cyber.cron.v1beta1.MsgCronChangeJobCID")
	proto.RegisterType((*MsgCronChangeJobLabel)(nil), "cyber.cron.v1beta1.MsgCronChangeJobLabel")
	proto.RegisterType((*MsgCronChangeJobCallData)(nil), "cyber.cron.v1beta1.MsgCronChangeJobCallData")
	proto.RegisterType((*MsgCronChangeJobGasPrice)(nil), "cyber.cron.v1beta1.MsgCronChangeJobGasPrice")
	proto.RegisterType((*MsgCronChangeJobPeriod)(nil), "cyber.cron.v1beta1.MsgCronChangeJobPeriod")
	proto.RegisterType((*MsgCronChangeJobBlock)(nil), "cyber.cron.v1beta1.MsgCronChangeJobBlock")
	proto.RegisterType((*MsgCronAddJobResponse)(nil), "cyber.cron.v1beta1.MsgCronAddJobResponse")
	proto.RegisterType((*MsgCronRemoveJobResponse)(nil), "cyber.cron.v1beta1.MsgCronRemoveJobResponse")
	proto.RegisterType((*MsgCronChangeJobCIDResponse)(nil), "cyber.cron.v1beta1.MsgCronChangeJobCIDResponse")
	proto.RegisterType((*MsgCronChangeJobLabelResponse)(nil), "cyber.cron.v1beta1.MsgCronChangeJobLabelResponse")
	proto.RegisterType((*MsgCronChangeJobCallDataResponse)(nil), "cyber.cron.v1beta1.MsgCronChangeJobCallDataResponse")
	proto.RegisterType((*MsgCronChangeJobGasPriceResponse)(nil), "cyber.cron.v1beta1.MsgCronChangeJobGasPriceResponse")
	proto.RegisterType((*MsgCronChangeJobPeriodResponse)(nil), "cyber.cron.v1beta1.MsgCronChangeJobPeriodResponse")
	proto.RegisterType((*MsgCronChangeJobBlockResponse)(nil), "cyber.cron.v1beta1.MsgCronChangeJobBlockResponse")
}

func init() { proto.RegisterFile("cyber/cron/v1beta1/tx.proto", fileDescriptor_e3ac466c209dfdea) }

var fileDescriptor_e3ac466c209dfdea = []byte{
	// 879 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xcf, 0x6b, 0xe3, 0x46,
	0x14, 0xb6, 0x62, 0x27, 0x71, 0x66, 0x9b, 0x36, 0x68, 0x9b, 0x46, 0x2b, 0x63, 0x8f, 0x57, 0x14,
	0xb2, 0x5b, 0x76, 0x25, 0x92, 0x2d, 0x14, 0xb6, 0x50, 0xa8, 0xbd, 0xa5, 0x3f, 0xc8, 0x42, 0x10,
	0x7b, 0xda, 0x4b, 0x18, 0x49, 0x83, 0x56, 0x44, 0xd6, 0x18, 0x49, 0xf9, 0x45, 0xef, 0x25, 0x50,
	0x0a, 0xfd, 0x13, 0xf2, 0xbf, 0xf4, 0x92, 0x63, 0x4e, 0xa5, 0xa7, 0xa1, 0x24, 0x97, 0xe2, 0x4b,
	0xc1, 0xb7, 0xf6, 0x50, 0x8a, 0x66, 0x46, 0x63, 0xc5, 0x56, 0x5c, 0xe5, 0x54, 0x7c, 0xb2, 0xe7,
	0x7b, 0xdf, 0x7b, 0x6f, 0xde, 0xf7, 0xa4, 0x79, 0x23, 0xd0, 0x72, 0xcf, 0x1c, 0x1c, 0x5b, 0x6e,
	0x4c, 0x22, 0xeb, 0x78, 0xc7, 0xc1, 0x29, 0xda, 0xb1, 0xd2, 0x53, 0x73, 0x18, 0x93, 0x94, 0xa8,
	0x2a, 0x33, 0x9a, 0x99, 0xd1, 0x14, 0x46, 0xfd, 0x43, 0x9f, 0xf8, 0x84, 0x99, 0xad, 0xec, 0x1f,
	0x67, 0xea, 0xed, 0x92, 0x30, 0xcc, 0x8d, 0x9b, 0xb7, 0x5c, 0x92, 0x0c, 0x48, 0x72, 0xc0, 0xfd,
	0x5c, 0x12, 0x08, 0x83, 0xf1, 0x43, 0x1d, 0xac, 0xbf, 0x4e, 0xfc, 0x7e, 0x4c, 0xa2, 0x2f, 0x3d,
	0xef, 0x3b, 0xe2, 0xa8, 0x9f, 0x81, 0x55, 0x37, 0xc6, 0x28, 0x25, 0xb1, 0xa6, 0x74, 0x95, 0x27,
	0x6b, 0xbd, 0xf6, 0x88, 0xc2, 0x1c, 0x1a, 0x53, 0xf8, 0xfe, 0x19, 0x1a, 0x84, 0x2f, 0x0d, 0x01,
	0x18, 0x76, 0x6e, 0x52, 0x3f, 0x07, 0x4d, 0x97, 0x44, 0x69, 0x8c, 0xdc, 0x54, 0x5b, 0x62, 0x9e,
	0x70, 0x44, 0xa1, 0xc4, 0xc6, 0x14, 0x7e, 0x20, 0x5c, 0x05, 0x62, 0xd8, 0xd2, 0xa8, 0xbe, 0x01,
	0xab, 0x69, 0x1c, 0xf8, 0x3e, 0x8e, 0xb5, 0x7a, 0x57, 0x79, 0xf2, 0x60, 0xb7, 0x65, 0xce, 0xd6,
	0x6e, 0xbe, 0xe1, 0x14, 0xbe, 0x25, 0xc1, 0x9f, 0x6c, 0x49, 0x00, 0x86, 0x9d, 0x9b, 0xd4, 0xaf,
	0x40, 0x23, 0x24, 0xc8, 0xd3, 0x1a, 0x2c, 0xa4, 0x56, 0x16, 0x72, 0x8f, 0x20, 0xaf, 0xb7, 0x35,
	0xa2, 0x90, 0x31, 0xc7, 0x14, 0x3e, 0xe0, 0xc1, 0xb2, 0x95, 0x61, 0x33, 0x50, 0xb5, 0xc0, 0x72,
	0x88, 0x1c, 0x1c, 0x6a, 0xcb, 0xac, 0xac, 0x47, 0x23, 0x0a, 0x39, 0x30, 0xa6, 0xf0, 0x3d, 0x41,
	0xcf, 0x96, 0x86, 0xcd, 0x61, 0x75, 0x1b, 0xd4, 0xdd, 0xc0, 0xd3, 0x56, 0x18, 0x7d, 0x73, 0x44,
	0x61, 0xb6, 0x1c, 0x53, 0x08, 0x84, 0x00, 0x81, 0x67, 0xd8, 0x19, 0xf4, 0xb2, 0x79, 0x7e, 0x01,
	0x6b, 0x7f, 0x5c, 0xc0, 0x9a, 0xf1, 0x8b, 0x02, 0x36, 0x44, 0x23, 0x6c, 0x3c, 0x20, 0xc7, 0xf8,
	0xff, 0xeb, 0x85, 0x2c, 0xb7, 0x5e, 0xad, 0xdc, 0x42, 0x15, 0x7f, 0x2a, 0xe0, 0xa1, 0xa8, 0xa2,
	0xff, 0x0e, 0x45, 0x7e, 0x56, 0x45, 0xff, 0xdb, 0x57, 0x0b, 0x52, 0x48, 0xde, 0xb7, 0xc6, 0x3d,
	0xfa, 0x76, 0xbe, 0x04, 0x36, 0xa7, 0x2b, 0xde, 0x63, 0xc1, 0x16, 0xa4, 0xe6, 0x2f, 0xc0, 0x5a,
	0x84, 0x4f, 0x0e, 0xb8, 0x13, 0xaf, 0xfc, 0xf1, 0x88, 0xc2, 0x09, 0x38, 0xa6, 0x70, 0x83, 0x3b,
	0x4a, 0xc8, 0xb0, 0x9b, 0x11, 0x3e, 0xd9, 0x9b, 0x6a, 0xfe, 0x8f, 0x4b, 0x40, 0x9b, 0x69, 0x3e,
	0x0a, 0xc3, 0x57, 0x28, 0x45, 0x0b, 0xa4, 0x86, 0x8b, 0xc2, 0xf0, 0xc0, 0x43, 0x29, 0x2a, 0xaa,
	0x21, 0xc1, 0x89, 0x1a, 0x12, 0xca, 0x12, 0x8a, 0x32, 0x0b, 0x6a, 0xfc, 0x5a, 0xa2, 0xc6, 0xd7,
	0x28, 0xd9, 0x8f, 0x03, 0x17, 0x2f, 0x8a, 0x1a, 0xe7, 0x0a, 0x58, 0xf3, 0x51, 0x36, 0x36, 0x02,
	0x17, 0x8b, 0x53, 0xf4, 0x91, 0xc9, 0x67, 0x89, 0xe9, 0xa0, 0x04, 0xcb, 0x63, 0xb4, 0x4f, 0x82,
	0xa8, 0xb7, 0x7f, 0x49, 0x61, 0x2d, 0x53, 0x4b, 0xfa, 0x4c, 0xd4, 0x92, 0x90, 0xf1, 0x37, 0x85,
	0xdb, 0x7e, 0x90, 0xbe, 0x3b, 0x72, 0x4c, 0x97, 0x0c, 0x2c, 0x1e, 0x4d, 0xfc, 0x3c, 0x4f, 0xbc,
	0x43, 0x2b, 0x3d, 0x1b, 0xe2, 0x84, 0x45, 0xb4, 0x9b, 0xbe, 0x50, 0xac, 0x20, 0xec, 0x3f, 0x0a,
	0xf8, 0x68, 0x5a, 0xd8, 0x7d, 0x1c, 0x07, 0xc4, 0x5b, 0x14, 0x59, 0x5f, 0x80, 0x95, 0x21, 0xdb,
	0x30, 0x93, 0xb4, 0xd1, 0x6b, 0x8d, 0x28, 0x14, 0xc8, 0x98, 0xc2, 0x75, 0xee, 0xc2, 0xd7, 0x86,
	0x2d, 0x0c, 0x05, 0x01, 0xfe, 0x52, 0x66, 0x8f, 0x9c, 0x5e, 0x48, 0xdc, 0xc3, 0x45, 0xa9, 0xdf,
	0x02, 0xcb, 0x4e, 0xb6, 0x5f, 0x51, 0x3e, 0x73, 0x60, 0xc0, 0xc4, 0x81, 0x2d, 0x0d, 0x9b, 0xc3,
	0x85, 0xda, 0xb7, 0x64, 0xe9, 0xfc, 0xba, 0x62, 0xe3, 0x64, 0x48, 0xa2, 0x04, 0x1b, 0xba, 0x7c,
	0xdb, 0xe4, 0xf8, 0x94, 0xb6, 0x36, 0x68, 0x95, 0x0c, 0x25, 0x69, 0x86, 0xa0, 0x5d, 0x7a, 0x82,
	0x4b, 0x82, 0x01, 0xba, 0x77, 0x9d, 0x6b, 0xf3, 0x38, 0xf9, 0xdb, 0x2e, 0x39, 0x5d, 0xd0, 0x29,
	0x7f, 0x70, 0xe7, 0x6d, 0x85, 0x75, 0x36, 0x27, 0xec, 0xfe, 0xb4, 0x0a, 0xea, 0xaf, 0x13, 0x5f,
	0x7d, 0x0b, 0x40, 0xe1, 0xce, 0xf6, 0xb8, 0xec, 0x66, 0x73, 0x4b, 0x27, 0xfd, 0xe9, 0x7f, 0x52,
	0xf2, 0x1c, 0xaa, 0x0b, 0xd6, 0x6f, 0x5f, 0x43, 0x3e, 0x9e, 0xe3, 0x2b, 0x59, 0xfa, 0xb3, 0x2a,
	0x2c, 0x99, 0x24, 0x04, 0x1b, 0x33, 0xb7, 0x84, 0xed, 0x39, 0x11, 0x8a, 0x44, 0xdd, 0xaa, 0x48,
	0x94, 0xd9, 0x62, 0xa0, 0x96, 0x4c, 0xe8, 0xa7, 0x55, 0xc2, 0x30, 0xaa, 0xbe, 0x53, 0x99, 0x2a,
	0x73, 0x7e, 0x0f, 0x36, 0xcb, 0x47, 0xe1, 0xb3, 0x4a, 0xbb, 0x17, 0x6c, 0xfd, 0xd3, 0xfb, 0xb0,
	0xef, 0x4c, 0x2e, 0x27, 0x4f, 0xa5, 0xe4, 0x39, 0xbb, 0x5a, 0xf2, 0xe9, 0xe7, 0x5c, 0x3d, 0x02,
	0x0f, 0xcb, 0x4e, 0xe7, 0x4f, 0xaa, 0x04, 0xe3, 0x5c, 0x7d, 0xb7, 0x3a, 0xf7, 0xce, 0x26, 0xf3,
	0x33, 0xb1, 0x52, 0x93, 0x19, 0xb5, 0x5a, 0x93, 0x6f, 0xbd, 0x8f, 0xbd, 0x6f, 0x2e, 0xaf, 0x3b,
	0xca, 0xd5, 0x75, 0x47, 0xf9, 0xfd, 0xba, 0xa3, 0xfc, 0x7c, 0xd3, 0xa9, 0x5d, 0xdd, 0x74, 0x6a,
	0xbf, 0xdd, 0x74, 0x6a, 0x6f, 0xcd, 0xe2, 0x8c, 0xcb, 0xc2, 0xba, 0x24, 0xf2, 0x63, 0x9c, 0x24,
	0x96, 0x4f, 0x9e, 0xf3, 0xaf, 0xb5, 0x53, 0xfe, 0xbd, 0xc6, 0xe6, 0x9d, 0xb3, 0xc2, 0x3e, 0xc8,
	0x5e, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xee, 0x73, 0xb6, 0xe6, 0x11, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CronAddJob(ctx context.Context, in *MsgCronAddJob, opts ...grpc.CallOption) (*MsgCronAddJobResponse, error)
	CronRemoveJob(ctx context.Context, in *MsgCronRemoveJob, opts ...grpc.CallOption) (*MsgCronRemoveJobResponse, error)
	CronChangeJobCID(ctx context.Context, in *MsgCronChangeJobCID, opts ...grpc.CallOption) (*MsgCronChangeJobCIDResponse, error)
	CronChangeJobLabel(ctx context.Context, in *MsgCronChangeJobLabel, opts ...grpc.CallOption) (*MsgCronChangeJobLabelResponse, error)
	CronChangeJobCallData(ctx context.Context, in *MsgCronChangeJobCallData, opts ...grpc.CallOption) (*MsgCronChangeJobCallDataResponse, error)
	CronChangeJobGasPrice(ctx context.Context, in *MsgCronChangeJobGasPrice, opts ...grpc.CallOption) (*MsgCronChangeJobGasPriceResponse, error)
	CronChangeJobPeriod(ctx context.Context, in *MsgCronChangeJobPeriod, opts ...grpc.CallOption) (*MsgCronChangeJobPeriodResponse, error)
	CronChangeJobBlock(ctx context.Context, in *MsgCronChangeJobBlock, opts ...grpc.CallOption) (*MsgCronChangeJobBlockResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CronAddJob(ctx context.Context, in *MsgCronAddJob, opts ...grpc.CallOption) (*MsgCronAddJobResponse, error) {
	out := new(MsgCronAddJobResponse)
	err := c.cc.Invoke(ctx, "/cyber.cron.v1beta1.Msg/CronAddJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CronRemoveJob(ctx context.Context, in *MsgCronRemoveJob, opts ...grpc.CallOption) (*MsgCronRemoveJobResponse, error) {
	out := new(MsgCronRemoveJobResponse)
	err := c.cc.Invoke(ctx, "/cyber.cron.v1beta1.Msg/CronRemoveJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CronChangeJobCID(ctx context.Context, in *MsgCronChangeJobCID, opts ...grpc.CallOption) (*MsgCronChangeJobCIDResponse, error) {
	out := new(MsgCronChangeJobCIDResponse)
	err := c.cc.Invoke(ctx, "/cyber.cron.v1beta1.Msg/CronChangeJobCID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CronChangeJobLabel(ctx context.Context, in *MsgCronChangeJobLabel, opts ...grpc.CallOption) (*MsgCronChangeJobLabelResponse, error) {
	out := new(MsgCronChangeJobLabelResponse)
	err := c.cc.Invoke(ctx, "/cyber.cron.v1beta1.Msg/CronChangeJobLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CronChangeJobCallData(ctx context.Context, in *MsgCronChangeJobCallData, opts ...grpc.CallOption) (*MsgCronChangeJobCallDataResponse, error) {
	out := new(MsgCronChangeJobCallDataResponse)
	err := c.cc.Invoke(ctx, "/cyber.cron.v1beta1.Msg/CronChangeJobCallData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CronChangeJobGasPrice(ctx context.Context, in *MsgCronChangeJobGasPrice, opts ...grpc.CallOption) (*MsgCronChangeJobGasPriceResponse, error) {
	out := new(MsgCronChangeJobGasPriceResponse)
	err := c.cc.Invoke(ctx, "/cyber.cron.v1beta1.Msg/CronChangeJobGasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CronChangeJobPeriod(ctx context.Context, in *MsgCronChangeJobPeriod, opts ...grpc.CallOption) (*MsgCronChangeJobPeriodResponse, error) {
	out := new(MsgCronChangeJobPeriodResponse)
	err := c.cc.Invoke(ctx, "/cyber.cron.v1beta1.Msg/CronChangeJobPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CronChangeJobBlock(ctx context.Context, in *MsgCronChangeJobBlock, opts ...grpc.CallOption) (*MsgCronChangeJobBlockResponse, error) {
	out := new(MsgCronChangeJobBlockResponse)
	err := c.cc.Invoke(ctx, "/cyber.cron.v1beta1.Msg/CronChangeJobBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CronAddJob(context.Context, *MsgCronAddJob) (*MsgCronAddJobResponse, error)
	CronRemoveJob(context.Context, *MsgCronRemoveJob) (*MsgCronRemoveJobResponse, error)
	CronChangeJobCID(context.Context, *MsgCronChangeJobCID) (*MsgCronChangeJobCIDResponse, error)
	CronChangeJobLabel(context.Context, *MsgCronChangeJobLabel) (*MsgCronChangeJobLabelResponse, error)
	CronChangeJobCallData(context.Context, *MsgCronChangeJobCallData) (*MsgCronChangeJobCallDataResponse, error)
	CronChangeJobGasPrice(context.Context, *MsgCronChangeJobGasPrice) (*MsgCronChangeJobGasPriceResponse, error)
	CronChangeJobPeriod(context.Context, *MsgCronChangeJobPeriod) (*MsgCronChangeJobPeriodResponse, error)
	CronChangeJobBlock(context.Context, *MsgCronChangeJobBlock) (*MsgCronChangeJobBlockResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CronAddJob(ctx context.Context, req *MsgCronAddJob) (*MsgCronAddJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CronAddJob not implemented")
}
func (*UnimplementedMsgServer) CronRemoveJob(ctx context.Context, req *MsgCronRemoveJob) (*MsgCronRemoveJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CronRemoveJob not implemented")
}
func (*UnimplementedMsgServer) CronChangeJobCID(ctx context.Context, req *MsgCronChangeJobCID) (*MsgCronChangeJobCIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CronChangeJobCID not implemented")
}
func (*UnimplementedMsgServer) CronChangeJobLabel(ctx context.Context, req *MsgCronChangeJobLabel) (*MsgCronChangeJobLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CronChangeJobLabel not implemented")
}
func (*UnimplementedMsgServer) CronChangeJobCallData(ctx context.Context, req *MsgCronChangeJobCallData) (*MsgCronChangeJobCallDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CronChangeJobCallData not implemented")
}
func (*UnimplementedMsgServer) CronChangeJobGasPrice(ctx context.Context, req *MsgCronChangeJobGasPrice) (*MsgCronChangeJobGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CronChangeJobGasPrice not implemented")
}
func (*UnimplementedMsgServer) CronChangeJobPeriod(ctx context.Context, req *MsgCronChangeJobPeriod) (*MsgCronChangeJobPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CronChangeJobPeriod not implemented")
}
func (*UnimplementedMsgServer) CronChangeJobBlock(ctx context.Context, req *MsgCronChangeJobBlock) (*MsgCronChangeJobBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CronChangeJobBlock not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CronAddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCronAddJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CronAddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.cron.v1beta1.Msg/CronAddJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CronAddJob(ctx, req.(*MsgCronAddJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CronRemoveJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCronRemoveJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CronRemoveJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.cron.v1beta1.Msg/CronRemoveJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CronRemoveJob(ctx, req.(*MsgCronRemoveJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CronChangeJobCID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCronChangeJobCID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CronChangeJobCID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.cron.v1beta1.Msg/CronChangeJobCID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CronChangeJobCID(ctx, req.(*MsgCronChangeJobCID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CronChangeJobLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCronChangeJobLabel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CronChangeJobLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.cron.v1beta1.Msg/CronChangeJobLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CronChangeJobLabel(ctx, req.(*MsgCronChangeJobLabel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CronChangeJobCallData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCronChangeJobCallData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CronChangeJobCallData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.cron.v1beta1.Msg/CronChangeJobCallData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CronChangeJobCallData(ctx, req.(*MsgCronChangeJobCallData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CronChangeJobGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCronChangeJobGasPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CronChangeJobGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.cron.v1beta1.Msg/CronChangeJobGasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CronChangeJobGasPrice(ctx, req.(*MsgCronChangeJobGasPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CronChangeJobPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCronChangeJobPeriod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CronChangeJobPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.cron.v1beta1.Msg/CronChangeJobPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CronChangeJobPeriod(ctx, req.(*MsgCronChangeJobPeriod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CronChangeJobBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCronChangeJobBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CronChangeJobBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.cron.v1beta1.Msg/CronChangeJobBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CronChangeJobBlock(ctx, req.(*MsgCronChangeJobBlock))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cyber.cron.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CronAddJob",
			Handler:    _Msg_CronAddJob_Handler,
		},
		{
			MethodName: "CronRemoveJob",
			Handler:    _Msg_CronRemoveJob_Handler,
		},
		{
			MethodName: "CronChangeJobCID",
			Handler:    _Msg_CronChangeJobCID_Handler,
		},
		{
			MethodName: "CronChangeJobLabel",
			Handler:    _Msg_CronChangeJobLabel_Handler,
		},
		{
			MethodName: "CronChangeJobCallData",
			Handler:    _Msg_CronChangeJobCallData_Handler,
		},
		{
			MethodName: "CronChangeJobGasPrice",
			Handler:    _Msg_CronChangeJobGasPrice_Handler,
		},
		{
			MethodName: "CronChangeJobPeriod",
			Handler:    _Msg_CronChangeJobPeriod_Handler,
		},
		{
			MethodName: "CronChangeJobBlock",
			Handler:    _Msg_CronChangeJobBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cyber/cron/v1beta1/tx.proto",
}

func (m *MsgCronAddJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCronAddJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCronAddJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Load != nil {
		{
			size, err := m.Load.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Trigger != nil {
		{
			size, err := m.Trigger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCronRemoveJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCronRemoveJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCronRemoveJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCronChangeJobCID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCronChangeJobCID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCronChangeJobCID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCronChangeJobLabel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCronChangeJobLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCronChangeJobLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewLabel) > 0 {
		i -= len(m.NewLabel)
		copy(dAtA[i:], m.NewLabel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewLabel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCronChangeJobCallData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCronChangeJobCallData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCronChangeJobCallData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CallData) > 0 {
		i -= len(m.CallData)
		copy(dAtA[i:], m.CallData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CallData)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCronChangeJobGasPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCronChangeJobGasPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCronChangeJobGasPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GasPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCronChangeJobPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCronChangeJobPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCronChangeJobPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Period != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCronChangeJobBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCronChangeJobBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCronChangeJobBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCronAddJobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCronAddJobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCronAddJobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCronRemoveJobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCronRemoveJobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCronRemoveJobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCronChangeJobCIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCronChangeJobCIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCronChangeJobCIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCronChangeJobLabelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCronChangeJobLabelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCronChangeJobLabelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCronChangeJobCallDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCronChangeJobCallDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCronChangeJobCallDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCronChangeJobGasPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCronChangeJobGasPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCronChangeJobGasPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCronChangeJobPeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCronChangeJobPeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCronChangeJobPeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCronChangeJobBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCronChangeJobBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCronChangeJobBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCronAddJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Trigger != nil {
		l = m.Trigger.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Load != nil {
		l = m.Load.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCronRemoveJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCronChangeJobCID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCronChangeJobLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewLabel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCronChangeJobCallData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CallData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCronChangeJobGasPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.GasPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCronChangeJobPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Period != 0 {
		n += 1 + sovTx(uint64(m.Period))
	}
	return n
}

func (m *MsgCronChangeJobBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Block != 0 {
		n += 1 + sovTx(uint64(m.Block))
	}
	return n
}

func (m *MsgCronAddJobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCronRemoveJobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCronChangeJobCIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCronChangeJobLabelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCronChangeJobCallDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCronChangeJobGasPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCronChangeJobPeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCronChangeJobBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCronAddJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCronAddJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCronAddJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trigger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trigger == nil {
				m.Trigger = &Trigger{}
			}
			if err := m.Trigger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Load == nil {
				m.Load = &Load{}
			}
			if err := m.Load.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCronRemoveJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCronRemoveJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCronRemoveJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCronChangeJobCID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCronChangeJobCID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCronChangeJobCID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCronChangeJobLabel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCronChangeJobLabel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCronChangeJobLabel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCronChangeJobCallData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCronChangeJobCallData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCronChangeJobCallData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCronChangeJobGasPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCronChangeJobGasPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCronChangeJobGasPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCronChangeJobPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCronChangeJobPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCronChangeJobPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCronChangeJobBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCronChangeJobBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCronChangeJobBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCronAddJobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCronAddJobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCronAddJobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCronRemoveJobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCronRemoveJobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCronRemoveJobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCronChangeJobCIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCronChangeJobCIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCronChangeJobCIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCronChangeJobLabelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCronChangeJobLabelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCronChangeJobLabelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCronChangeJobCallDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCronChangeJobCallDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCronChangeJobCallDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCronChangeJobGasPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCronChangeJobGasPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCronChangeJobGasPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCronChangeJobPeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCronChangeJobPeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCronChangeJobPeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCronChangeJobBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCronChangeJobBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCronChangeJobBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
