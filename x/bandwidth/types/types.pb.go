// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cyber/bandwidth/v1beta1/types.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	RecoveryPeriod    uint64                                 `protobuf:"varint,1,opt,name=recovery_period,json=recoveryPeriod,proto3" json:"recovery_period,omitempty" yaml:"recovery_period"`
	AdjustPricePeriod uint64                                 `protobuf:"varint,2,opt,name=adjust_price_period,json=adjustPricePeriod,proto3" json:"adjust_price_period,omitempty" yaml:"adjust_price_period"`
	BasePrice         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=base_price,json=basePrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base_price" yaml:"base_price"`
	MaxBlockBandwidth uint64                                 `protobuf:"varint,4,opt,name=max_block_bandwidth,json=maxBlockBandwidth,proto3" json:"max_block_bandwidth,omitempty" yaml:"max_block_bandwidth"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_b76904de4f1717b1, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetRecoveryPeriod() uint64 {
	if m != nil {
		return m.RecoveryPeriod
	}
	return 0
}

func (m *Params) GetAdjustPricePeriod() uint64 {
	if m != nil {
		return m.AdjustPricePeriod
	}
	return 0
}

func (m *Params) GetMaxBlockBandwidth() uint64 {
	if m != nil {
		return m.MaxBlockBandwidth
	}
	return 0
}

type AccountBandwidth struct {
	Address          string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	RemainedValue    uint64 `protobuf:"varint,2,opt,name=remained_value,json=remainedValue,proto3" json:"remained_value,omitempty"`
	LastUpdatedBlock uint64 `protobuf:"varint,3,opt,name=last_updated_block,json=lastUpdatedBlock,proto3" json:"last_updated_block,omitempty"`
	MaxValue         uint64 `protobuf:"varint,4,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
}

func (m *AccountBandwidth) Reset()         { *m = AccountBandwidth{} }
func (m *AccountBandwidth) String() string { return proto.CompactTextString(m) }
func (*AccountBandwidth) ProtoMessage()    {}
func (*AccountBandwidth) Descriptor() ([]byte, []int) {
	return fileDescriptor_b76904de4f1717b1, []int{1}
}
func (m *AccountBandwidth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountBandwidth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountBandwidth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountBandwidth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountBandwidth.Merge(m, src)
}
func (m *AccountBandwidth) XXX_Size() int {
	return m.Size()
}
func (m *AccountBandwidth) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountBandwidth.DiscardUnknown(m)
}

var xxx_messageInfo_AccountBandwidth proto.InternalMessageInfo

type Price struct {
	Price github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price" yaml:"price"`
}

func (m *Price) Reset()         { *m = Price{} }
func (m *Price) String() string { return proto.CompactTextString(m) }
func (*Price) ProtoMessage()    {}
func (*Price) Descriptor() ([]byte, []int) {
	return fileDescriptor_b76904de4f1717b1, []int{2}
}
func (m *Price) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Price) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Price.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Price) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Price.Merge(m, src)
}
func (m *Price) XXX_Size() int {
	return m.Size()
}
func (m *Price) XXX_DiscardUnknown() {
	xxx_messageInfo_Price.DiscardUnknown(m)
}

var xxx_messageInfo_Price proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "cyber.bandwidth.v1beta1.Params")
	proto.RegisterType((*AccountBandwidth)(nil), "cyber.bandwidth.v1beta1.AccountBandwidth")
	proto.RegisterType((*Price)(nil), "cyber.bandwidth.v1beta1.Price")
}

func init() {
	proto.RegisterFile("cyber/bandwidth/v1beta1/types.proto", fileDescriptor_b76904de4f1717b1)
}

var fileDescriptor_b76904de4f1717b1 = []byte{
	// 476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0xed, 0x92, 0x96, 0xe6, 0x04, 0xa5, 0x31, 0x08, 0xa2, 0x20, 0xd9, 0x95, 0x11, 0xa8,
	0x03, 0x8d, 0x55, 0x75, 0xcb, 0x80, 0x84, 0xcb, 0x0a, 0x8a, 0x2c, 0x60, 0x60, 0xb1, 0xee, 0x9f,
	0x5c, 0xd3, 0x5c, 0xce, 0xba, 0x3b, 0x87, 0xf8, 0x1b, 0x30, 0xf2, 0x11, 0x32, 0xf2, 0x51, 0x3a,
	0x76, 0x03, 0x31, 0x58, 0x28, 0x59, 0x3a, 0xe7, 0x13, 0xa0, 0xbb, 0xb3, 0xd3, 0xaa, 0xea, 0xc2,
	0x94, 0xdc, 0xf3, 0x3e, 0x7a, 0xde, 0xc7, 0x3f, 0xbd, 0xe0, 0x05, 0xae, 0x10, 0x15, 0x11, 0x82,
	0x53, 0xf2, 0x2d, 0x27, 0xea, 0x2c, 0x9a, 0x1d, 0x23, 0xaa, 0xe0, 0x71, 0xa4, 0xaa, 0x82, 0xca,
	0x61, 0x21, 0xb8, 0xe2, 0xde, 0x33, 0x63, 0x1a, 0x6e, 0x4c, 0xc3, 0xc6, 0x34, 0x78, 0x92, 0xf1,
	0x8c, 0x1b, 0x4f, 0xa4, 0xff, 0x59, 0x7b, 0xf8, 0x6b, 0x0b, 0xec, 0x8c, 0xa1, 0x80, 0x4c, 0x7a,
	0xa7, 0xe0, 0x91, 0xa0, 0x98, 0xcf, 0xa8, 0xa8, 0xd2, 0x82, 0x8a, 0x9c, 0x93, 0xbe, 0x7b, 0xe0,
	0x1e, 0x76, 0xe2, 0xc1, 0xba, 0x0e, 0x9e, 0x56, 0x90, 0x4d, 0x46, 0xe1, 0x2d, 0x43, 0x98, 0xec,
	0xb5, 0xca, 0xd8, 0x08, 0xde, 0x07, 0xf0, 0x18, 0x92, 0xaf, 0xa5, 0x54, 0x69, 0x21, 0x72, 0x4c,
	0xdb, 0xa0, 0x2d, 0x13, 0xe4, 0xaf, 0xeb, 0x60, 0x60, 0x83, 0xee, 0x30, 0x85, 0x49, 0xcf, 0xaa,
	0x63, 0x2d, 0x36, 0x79, 0x08, 0x00, 0x04, 0x25, 0xb5, 0xc6, 0xfe, 0xbd, 0x03, 0xf7, 0xb0, 0x1b,
	0x9f, 0x5e, 0xd4, 0x81, 0xf3, 0xa7, 0x0e, 0x5e, 0x65, 0xb9, 0x3a, 0x2b, 0xd1, 0x10, 0x73, 0x16,
	0x61, 0x2e, 0x19, 0x97, 0xcd, 0xcf, 0x91, 0x24, 0xe7, 0x0d, 0x94, 0x77, 0x14, 0xaf, 0xeb, 0xa0,
	0x67, 0x97, 0x5e, 0x27, 0x85, 0x49, 0x57, 0x3f, 0xcc, 0x26, 0xdd, 0x99, 0xc1, 0x79, 0x8a, 0x26,
	0x1c, 0x9f, 0xa7, 0x1b, 0x70, 0xfd, 0xce, 0xed, 0xce, 0x77, 0x98, 0xc2, 0xa4, 0xc7, 0xe0, 0x3c,
	0xd6, 0x62, 0xdc, 0x6a, 0xa3, 0xce, 0xd5, 0x22, 0x70, 0xc3, 0x9f, 0x2e, 0xd8, 0x7f, 0x8b, 0x31,
	0x2f, 0xa7, 0x6a, 0x33, 0xf2, 0xfa, 0xe0, 0x3e, 0x24, 0x44, 0x50, 0x29, 0x0d, 0xdb, 0x6e, 0xd2,
	0x3e, 0xbd, 0x97, 0x60, 0x4f, 0x50, 0x06, 0xf3, 0x29, 0x25, 0xe9, 0x0c, 0x4e, 0x4a, 0x6a, 0x99,
	0x25, 0x0f, 0x5b, 0xf5, 0xb3, 0x16, 0xbd, 0xd7, 0xc0, 0x9b, 0x40, 0xa9, 0xd2, 0xb2, 0x20, 0x50,
	0x51, 0x62, 0xfb, 0x18, 0x2e, 0x9d, 0x64, 0x5f, 0x4f, 0x3e, 0xd9, 0x81, 0xa9, 0xe4, 0x3d, 0x07,
	0x5d, 0x5d, 0xda, 0xe6, 0x99, 0xef, 0x49, 0x76, 0x19, 0x9c, 0x9b, 0xa8, 0xd1, 0xee, 0xf7, 0x45,
	0xe0, 0x5c, 0x2d, 0x02, 0x27, 0xcc, 0xc0, 0xb6, 0x25, 0xf1, 0x11, 0x6c, 0x5b, 0xd0, 0xa6, 0x5c,
	0xfc, 0xe6, 0xbf, 0x41, 0x3f, 0xb0, 0xa4, 0x1a, 0xc6, 0x36, 0xec, 0x7a, 0x51, 0xfc, 0xfe, 0x62,
	0xe9, 0xbb, 0x97, 0x4b, 0xdf, 0xfd, 0xbb, 0xf4, 0xdd, 0x1f, 0x2b, 0xdf, 0xb9, 0x5c, 0xf9, 0xce,
	0xef, 0x95, 0xef, 0x7c, 0x39, 0xb9, 0xb9, 0x42, 0x5f, 0x30, 0xe6, 0xd3, 0x4c, 0x83, 0x89, 0x32,
	0x7e, 0x64, 0xef, 0x7e, 0x7e, 0xe3, 0xf2, 0xcd, 0x4e, 0xb4, 0x63, 0x6e, 0xf8, 0xe4, 0x5f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xab, 0xc7, 0xd3, 0x40, 0x19, 0x03, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RecoveryPeriod != that1.RecoveryPeriod {
		return false
	}
	if this.AdjustPricePeriod != that1.AdjustPricePeriod {
		return false
	}
	if !this.BasePrice.Equal(that1.BasePrice) {
		return false
	}
	if this.MaxBlockBandwidth != that1.MaxBlockBandwidth {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxBlockBandwidth != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxBlockBandwidth))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.BasePrice.Size()
		i -= size
		if _, err := m.BasePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AdjustPricePeriod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AdjustPricePeriod))
		i--
		dAtA[i] = 0x10
	}
	if m.RecoveryPeriod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RecoveryPeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountBandwidth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountBandwidth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountBandwidth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxValue != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxValue))
		i--
		dAtA[i] = 0x20
	}
	if m.LastUpdatedBlock != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastUpdatedBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.RemainedValue != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RemainedValue))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Price) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Price) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Price) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecoveryPeriod != 0 {
		n += 1 + sovTypes(uint64(m.RecoveryPeriod))
	}
	if m.AdjustPricePeriod != 0 {
		n += 1 + sovTypes(uint64(m.AdjustPricePeriod))
	}
	l = m.BasePrice.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.MaxBlockBandwidth != 0 {
		n += 1 + sovTypes(uint64(m.MaxBlockBandwidth))
	}
	return n
}

func (m *AccountBandwidth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RemainedValue != 0 {
		n += 1 + sovTypes(uint64(m.RemainedValue))
	}
	if m.LastUpdatedBlock != 0 {
		n += 1 + sovTypes(uint64(m.LastUpdatedBlock))
	}
	if m.MaxValue != 0 {
		n += 1 + sovTypes(uint64(m.MaxValue))
	}
	return n
}

func (m *Price) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveryPeriod", wireType)
			}
			m.RecoveryPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecoveryPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdjustPricePeriod", wireType)
			}
			m.AdjustPricePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdjustPricePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BasePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBlockBandwidth", wireType)
			}
			m.MaxBlockBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBlockBandwidth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountBandwidth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountBandwidth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountBandwidth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainedValue", wireType)
			}
			m.RemainedValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainedValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedBlock", wireType)
			}
			m.LastUpdatedBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdatedBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValue", wireType)
			}
			m.MaxValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Price) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Price: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Price: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
