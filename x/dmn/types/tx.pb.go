// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cyber/dmn/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateThought struct {
	Program  string  `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Trigger  Trigger `protobuf:"bytes,2,opt,name=trigger,proto3" json:"trigger"`
	Load     Load    `protobuf:"bytes,3,opt,name=load,proto3" json:"load"`
	Name     string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Particle string  `protobuf:"bytes,5,opt,name=particle,proto3" json:"particle,omitempty"`
}

func (m *MsgCreateThought) Reset()         { *m = MsgCreateThought{} }
func (m *MsgCreateThought) String() string { return proto.CompactTextString(m) }
func (*MsgCreateThought) ProtoMessage()    {}
func (*MsgCreateThought) Descriptor() ([]byte, []int) {
	return fileDescriptor_4770788ccd571dd4, []int{0}
}
func (m *MsgCreateThought) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateThought) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateThought.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateThought) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateThought.Merge(m, src)
}
func (m *MsgCreateThought) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateThought) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateThought.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateThought proto.InternalMessageInfo

type MsgForgetThought struct {
	Program string `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *MsgForgetThought) Reset()         { *m = MsgForgetThought{} }
func (m *MsgForgetThought) String() string { return proto.CompactTextString(m) }
func (*MsgForgetThought) ProtoMessage()    {}
func (*MsgForgetThought) Descriptor() ([]byte, []int) {
	return fileDescriptor_4770788ccd571dd4, []int{1}
}
func (m *MsgForgetThought) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgForgetThought) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgForgetThought.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgForgetThought) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgForgetThought.Merge(m, src)
}
func (m *MsgForgetThought) XXX_Size() int {
	return m.Size()
}
func (m *MsgForgetThought) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgForgetThought.DiscardUnknown(m)
}

var xxx_messageInfo_MsgForgetThought proto.InternalMessageInfo

type MsgChangeThoughtParticle struct {
	Program  string `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Particle string `protobuf:"bytes,3,opt,name=particle,proto3" json:"particle,omitempty"`
}

func (m *MsgChangeThoughtParticle) Reset()         { *m = MsgChangeThoughtParticle{} }
func (m *MsgChangeThoughtParticle) String() string { return proto.CompactTextString(m) }
func (*MsgChangeThoughtParticle) ProtoMessage()    {}
func (*MsgChangeThoughtParticle) Descriptor() ([]byte, []int) {
	return fileDescriptor_4770788ccd571dd4, []int{2}
}
func (m *MsgChangeThoughtParticle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeThoughtParticle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeThoughtParticle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeThoughtParticle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeThoughtParticle.Merge(m, src)
}
func (m *MsgChangeThoughtParticle) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeThoughtParticle) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeThoughtParticle.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeThoughtParticle proto.InternalMessageInfo

type MsgChangeThoughtName struct {
	Program string `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NewName string `protobuf:"bytes,3,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (m *MsgChangeThoughtName) Reset()         { *m = MsgChangeThoughtName{} }
func (m *MsgChangeThoughtName) String() string { return proto.CompactTextString(m) }
func (*MsgChangeThoughtName) ProtoMessage()    {}
func (*MsgChangeThoughtName) Descriptor() ([]byte, []int) {
	return fileDescriptor_4770788ccd571dd4, []int{3}
}
func (m *MsgChangeThoughtName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeThoughtName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeThoughtName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeThoughtName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeThoughtName.Merge(m, src)
}
func (m *MsgChangeThoughtName) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeThoughtName) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeThoughtName.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeThoughtName proto.InternalMessageInfo

type MsgChangeThoughtCallData struct {
	Program  string `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CallData string `protobuf:"bytes,3,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty"`
}

func (m *MsgChangeThoughtCallData) Reset()         { *m = MsgChangeThoughtCallData{} }
func (m *MsgChangeThoughtCallData) String() string { return proto.CompactTextString(m) }
func (*MsgChangeThoughtCallData) ProtoMessage()    {}
func (*MsgChangeThoughtCallData) Descriptor() ([]byte, []int) {
	return fileDescriptor_4770788ccd571dd4, []int{4}
}
func (m *MsgChangeThoughtCallData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeThoughtCallData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeThoughtCallData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeThoughtCallData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeThoughtCallData.Merge(m, src)
}
func (m *MsgChangeThoughtCallData) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeThoughtCallData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeThoughtCallData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeThoughtCallData proto.InternalMessageInfo

type MsgChangeThoughtGasPrice struct {
	Program  string                                  `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Name     string                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GasPrice github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"gas_price"`
}

func (m *MsgChangeThoughtGasPrice) Reset()         { *m = MsgChangeThoughtGasPrice{} }
func (m *MsgChangeThoughtGasPrice) String() string { return proto.CompactTextString(m) }
func (*MsgChangeThoughtGasPrice) ProtoMessage()    {}
func (*MsgChangeThoughtGasPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_4770788ccd571dd4, []int{5}
}
func (m *MsgChangeThoughtGasPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeThoughtGasPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeThoughtGasPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeThoughtGasPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeThoughtGasPrice.Merge(m, src)
}
func (m *MsgChangeThoughtGasPrice) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeThoughtGasPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeThoughtGasPrice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeThoughtGasPrice proto.InternalMessageInfo

type MsgChangeThoughtPeriod struct {
	Program string `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Period  uint64 `protobuf:"varint,3,opt,name=period,proto3" json:"period,omitempty"`
}

func (m *MsgChangeThoughtPeriod) Reset()         { *m = MsgChangeThoughtPeriod{} }
func (m *MsgChangeThoughtPeriod) String() string { return proto.CompactTextString(m) }
func (*MsgChangeThoughtPeriod) ProtoMessage()    {}
func (*MsgChangeThoughtPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_4770788ccd571dd4, []int{6}
}
func (m *MsgChangeThoughtPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeThoughtPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeThoughtPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeThoughtPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeThoughtPeriod.Merge(m, src)
}
func (m *MsgChangeThoughtPeriod) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeThoughtPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeThoughtPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeThoughtPeriod proto.InternalMessageInfo

type MsgChangeThoughtBlock struct {
	Program string `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Block   uint64 `protobuf:"varint,3,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *MsgChangeThoughtBlock) Reset()         { *m = MsgChangeThoughtBlock{} }
func (m *MsgChangeThoughtBlock) String() string { return proto.CompactTextString(m) }
func (*MsgChangeThoughtBlock) ProtoMessage()    {}
func (*MsgChangeThoughtBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_4770788ccd571dd4, []int{7}
}
func (m *MsgChangeThoughtBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeThoughtBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeThoughtBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeThoughtBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeThoughtBlock.Merge(m, src)
}
func (m *MsgChangeThoughtBlock) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeThoughtBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeThoughtBlock.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeThoughtBlock proto.InternalMessageInfo

type MsgCreateThoughtResponse struct {
}

func (m *MsgCreateThoughtResponse) Reset()         { *m = MsgCreateThoughtResponse{} }
func (m *MsgCreateThoughtResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateThoughtResponse) ProtoMessage()    {}
func (*MsgCreateThoughtResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4770788ccd571dd4, []int{8}
}
func (m *MsgCreateThoughtResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateThoughtResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateThoughtResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateThoughtResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateThoughtResponse.Merge(m, src)
}
func (m *MsgCreateThoughtResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateThoughtResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateThoughtResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateThoughtResponse proto.InternalMessageInfo

type MsgForgetThoughtResponse struct {
}

func (m *MsgForgetThoughtResponse) Reset()         { *m = MsgForgetThoughtResponse{} }
func (m *MsgForgetThoughtResponse) String() string { return proto.CompactTextString(m) }
func (*MsgForgetThoughtResponse) ProtoMessage()    {}
func (*MsgForgetThoughtResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4770788ccd571dd4, []int{9}
}
func (m *MsgForgetThoughtResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgForgetThoughtResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgForgetThoughtResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgForgetThoughtResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgForgetThoughtResponse.Merge(m, src)
}
func (m *MsgForgetThoughtResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgForgetThoughtResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgForgetThoughtResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgForgetThoughtResponse proto.InternalMessageInfo

type MsgChangeThoughtParticleResponse struct {
}

func (m *MsgChangeThoughtParticleResponse) Reset()         { *m = MsgChangeThoughtParticleResponse{} }
func (m *MsgChangeThoughtParticleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeThoughtParticleResponse) ProtoMessage()    {}
func (*MsgChangeThoughtParticleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4770788ccd571dd4, []int{10}
}
func (m *MsgChangeThoughtParticleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeThoughtParticleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeThoughtParticleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeThoughtParticleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeThoughtParticleResponse.Merge(m, src)
}
func (m *MsgChangeThoughtParticleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeThoughtParticleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeThoughtParticleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeThoughtParticleResponse proto.InternalMessageInfo

type MsgChangeThoughtNameResponse struct {
}

func (m *MsgChangeThoughtNameResponse) Reset()         { *m = MsgChangeThoughtNameResponse{} }
func (m *MsgChangeThoughtNameResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeThoughtNameResponse) ProtoMessage()    {}
func (*MsgChangeThoughtNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4770788ccd571dd4, []int{11}
}
func (m *MsgChangeThoughtNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeThoughtNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeThoughtNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeThoughtNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeThoughtNameResponse.Merge(m, src)
}
func (m *MsgChangeThoughtNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeThoughtNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeThoughtNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeThoughtNameResponse proto.InternalMessageInfo

type MsgChangeThoughtCallDataResponse struct {
}

func (m *MsgChangeThoughtCallDataResponse) Reset()         { *m = MsgChangeThoughtCallDataResponse{} }
func (m *MsgChangeThoughtCallDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeThoughtCallDataResponse) ProtoMessage()    {}
func (*MsgChangeThoughtCallDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4770788ccd571dd4, []int{12}
}
func (m *MsgChangeThoughtCallDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeThoughtCallDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeThoughtCallDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeThoughtCallDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeThoughtCallDataResponse.Merge(m, src)
}
func (m *MsgChangeThoughtCallDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeThoughtCallDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeThoughtCallDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeThoughtCallDataResponse proto.InternalMessageInfo

type MsgChangeThoughtGasPriceResponse struct {
}

func (m *MsgChangeThoughtGasPriceResponse) Reset()         { *m = MsgChangeThoughtGasPriceResponse{} }
func (m *MsgChangeThoughtGasPriceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeThoughtGasPriceResponse) ProtoMessage()    {}
func (*MsgChangeThoughtGasPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4770788ccd571dd4, []int{13}
}
func (m *MsgChangeThoughtGasPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeThoughtGasPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeThoughtGasPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeThoughtGasPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeThoughtGasPriceResponse.Merge(m, src)
}
func (m *MsgChangeThoughtGasPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeThoughtGasPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeThoughtGasPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeThoughtGasPriceResponse proto.InternalMessageInfo

type MsgChangeThoughtPeriodResponse struct {
}

func (m *MsgChangeThoughtPeriodResponse) Reset()         { *m = MsgChangeThoughtPeriodResponse{} }
func (m *MsgChangeThoughtPeriodResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeThoughtPeriodResponse) ProtoMessage()    {}
func (*MsgChangeThoughtPeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4770788ccd571dd4, []int{14}
}
func (m *MsgChangeThoughtPeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeThoughtPeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeThoughtPeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeThoughtPeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeThoughtPeriodResponse.Merge(m, src)
}
func (m *MsgChangeThoughtPeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeThoughtPeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeThoughtPeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeThoughtPeriodResponse proto.InternalMessageInfo

type MsgChangeThoughtBlockResponse struct {
}

func (m *MsgChangeThoughtBlockResponse) Reset()         { *m = MsgChangeThoughtBlockResponse{} }
func (m *MsgChangeThoughtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeThoughtBlockResponse) ProtoMessage()    {}
func (*MsgChangeThoughtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4770788ccd571dd4, []int{15}
}
func (m *MsgChangeThoughtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeThoughtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeThoughtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeThoughtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeThoughtBlockResponse.Merge(m, src)
}
func (m *MsgChangeThoughtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeThoughtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeThoughtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeThoughtBlockResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateThought)(nil), "cyber.dmn.v1beta1.MsgCreateThought")
	proto.RegisterType((*MsgForgetThought)(nil), "cyber.dmn.v1beta1.MsgForgetThought")
	proto.RegisterType((*MsgChangeThoughtParticle)(nil), "cyber.dmn.v1beta1.MsgChangeThoughtParticle")
	proto.RegisterType((*MsgChangeThoughtName)(nil), "cyber.dmn.v1beta1.MsgChangeThoughtName")
	proto.RegisterType((*MsgChangeThoughtCallData)(nil), "cyber.dmn.v1beta1.MsgChangeThoughtCallData")
	proto.RegisterType((*MsgChangeThoughtGasPrice)(nil), "cyber.dmn.v1beta1.MsgChangeThoughtGasPrice")
	proto.RegisterType((*MsgChangeThoughtPeriod)(nil), "cyber.dmn.v1beta1.MsgChangeThoughtPeriod")
	proto.RegisterType((*MsgChangeThoughtBlock)(nil), "cyber.dmn.v1beta1.MsgChangeThoughtBlock")
	proto.RegisterType((*MsgCreateThoughtResponse)(nil), "cyber.dmn.v1beta1.MsgCreateThoughtResponse")
	proto.RegisterType((*MsgForgetThoughtResponse)(nil), "cyber.dmn.v1beta1.MsgForgetThoughtResponse")
	proto.RegisterType((*MsgChangeThoughtParticleResponse)(nil), "cyber.dmn.v1beta1.MsgChangeThoughtParticleResponse")
	proto.RegisterType((*MsgChangeThoughtNameResponse)(nil), "cyber.dmn.v1beta1.MsgChangeThoughtNameResponse")
	proto.RegisterType((*MsgChangeThoughtCallDataResponse)(nil), "cyber.dmn.v1beta1.MsgChangeThoughtCallDataResponse")
	proto.RegisterType((*MsgChangeThoughtGasPriceResponse)(nil), "cyber.dmn.v1beta1.MsgChangeThoughtGasPriceResponse")
	proto.RegisterType((*MsgChangeThoughtPeriodResponse)(nil), "cyber.dmn.v1beta1.MsgChangeThoughtPeriodResponse")
	proto.RegisterType((*MsgChangeThoughtBlockResponse)(nil), "cyber.dmn.v1beta1.MsgChangeThoughtBlockResponse")
}

func init() { proto.RegisterFile("cyber/dmn/v1beta1/tx.proto", fileDescriptor_4770788ccd571dd4) }

var fileDescriptor_4770788ccd571dd4 = []byte{
	// 697 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x41, 0x4f, 0xd4, 0x4e,
	0x14, 0xdf, 0xc2, 0xc2, 0xc2, 0xfb, 0xe7, 0x9f, 0x48, 0x05, 0x2c, 0x55, 0xca, 0xa6, 0x1e, 0xc0,
	0x18, 0x5a, 0x17, 0x6e, 0x9e, 0xcc, 0x62, 0xf4, 0x22, 0x4a, 0x36, 0x9c, 0x34, 0x71, 0x33, 0xdb,
	0x4e, 0x66, 0x1b, 0xda, 0x4e, 0xd3, 0x29, 0x02, 0xdf, 0xc2, 0xf8, 0x29, 0xbc, 0xfa, 0x2d, 0x48,
	0xbc, 0x70, 0xf4, 0x44, 0x74, 0xf9, 0x16, 0x9e, 0xcc, 0x4c, 0x67, 0x2a, 0xbb, 0xdb, 0xc5, 0xf6,
	0xd4, 0x4e, 0xdf, 0xef, 0xfd, 0x7e, 0xef, 0xcd, 0xfc, 0xfa, 0x32, 0x60, 0x7a, 0x17, 0x03, 0x9c,
	0xba, 0x7e, 0x14, 0xbb, 0x9f, 0x3a, 0x03, 0x9c, 0xa1, 0x8e, 0x9b, 0x9d, 0x3b, 0x49, 0x4a, 0x33,
	0xaa, 0xaf, 0x88, 0x98, 0xe3, 0x47, 0xb1, 0x23, 0x63, 0xe6, 0x2a, 0xa1, 0x84, 0x8a, 0xa8, 0xcb,
	0xdf, 0x72, 0xa0, 0xb9, 0x59, 0x42, 0x72, 0x91, 0x60, 0x26, 0xc3, 0x96, 0x47, 0x59, 0x44, 0x99,
	0x3b, 0x40, 0x0c, 0x17, 0x00, 0x8f, 0x06, 0x71, 0x1e, 0xb7, 0xbf, 0x6b, 0x70, 0xef, 0x90, 0x91,
	0x83, 0x14, 0xa3, 0x0c, 0x1f, 0x0f, 0xe9, 0x29, 0x19, 0x66, 0xba, 0x01, 0xad, 0x24, 0xa5, 0x24,
	0x45, 0x91, 0xa1, 0xb5, 0xb5, 0x9d, 0xe5, 0x9e, 0x5a, 0xea, 0xcf, 0xa1, 0x95, 0xa5, 0x01, 0x21,
	0x38, 0x35, 0xe6, 0xda, 0xda, 0xce, 0x7f, 0x7b, 0xa6, 0x33, 0x55, 0xa8, 0x73, 0x9c, 0x23, 0xba,
	0xcd, 0xcb, 0xeb, 0xad, 0x46, 0x4f, 0x25, 0xe8, 0x1d, 0x68, 0x86, 0x14, 0xf9, 0xc6, 0xbc, 0x48,
	0x7c, 0x50, 0x92, 0xf8, 0x86, 0x22, 0x5f, 0x66, 0x09, 0xa8, 0xae, 0x43, 0x33, 0x46, 0x11, 0x36,
	0x9a, 0xa2, 0x0a, 0xf1, 0xae, 0x9b, 0xb0, 0x94, 0xa0, 0x34, 0x0b, 0xbc, 0x10, 0x1b, 0x0b, 0xe2,
	0x7b, 0xb1, 0xb6, 0x5f, 0x88, 0x66, 0x5e, 0xd1, 0x94, 0xe0, 0xec, 0xdf, 0xcd, 0x28, 0xf6, 0xb9,
	0xbf, 0xec, 0xb6, 0x0f, 0x06, 0xdf, 0x8e, 0x21, 0x8a, 0x89, 0xda, 0x8e, 0x23, 0xc9, 0x5e, 0x8f,
	0x69, 0xac, 0xce, 0xf9, 0x89, 0x3a, 0xfb, 0xb0, 0x3a, 0xa9, 0xf2, 0x96, 0xe7, 0xd4, 0x53, 0xd8,
	0x80, 0xa5, 0x18, 0x9f, 0xf5, 0xc5, 0xf7, 0x5c, 0xa1, 0x15, 0xe3, 0x33, 0x4e, 0x64, 0xe3, 0xe9,
	0x36, 0x0e, 0x50, 0x18, 0xbe, 0x44, 0x19, 0xaa, 0x29, 0xf2, 0x10, 0x96, 0x3d, 0x14, 0x86, 0x7d,
	0x1f, 0x65, 0x48, 0xf5, 0xe1, 0x49, 0x2a, 0xfb, 0x9b, 0x36, 0xad, 0xf3, 0x1a, 0xb1, 0xa3, 0x34,
	0xf0, 0xea, 0x36, 0x43, 0x60, 0x99, 0x20, 0xd6, 0x4f, 0x78, 0xaa, 0xb4, 0xc8, 0x86, 0x93, 0x9b,
	0xd7, 0xe1, 0xe6, 0x2d, 0x4c, 0x72, 0x40, 0x83, 0xb8, 0xeb, 0x72, 0x93, 0xfc, 0xbe, 0xde, 0xda,
	0x26, 0x41, 0x36, 0x3c, 0x1d, 0x38, 0x1e, 0x8d, 0x5c, 0xe9, 0xf4, 0xfc, 0xb1, 0xcb, 0xfc, 0x13,
	0xf9, 0x23, 0xf0, 0x84, 0xde, 0x12, 0x91, 0x65, 0xd9, 0x1f, 0x61, 0x7d, 0xea, 0x84, 0x71, 0x1a,
	0x50, 0xbf, 0x66, 0xc1, 0xeb, 0xb0, 0x98, 0x88, 0x3c, 0x51, 0x6d, 0xb3, 0x27, 0x57, 0xf6, 0x07,
	0x58, 0x9b, 0xe4, 0xef, 0x86, 0xd4, 0x3b, 0xa9, 0x49, 0xbf, 0x0a, 0x0b, 0x03, 0x9e, 0x26, 0xd9,
	0xf3, 0x85, 0x6d, 0xe6, 0xfb, 0x7d, 0xfb, 0x6f, 0xed, 0x61, 0x96, 0xd0, 0x98, 0x61, 0x19, 0x1b,
	0x33, 0x7f, 0x11, 0xb3, 0xa1, 0x3d, 0xcb, 0xd6, 0x05, 0xc6, 0x82, 0x47, 0x65, 0xa6, 0xbc, 0x8b,
	0x43, 0x79, 0xea, 0x2e, 0x8c, 0xf2, 0x43, 0x81, 0x69, 0x83, 0x55, 0x7e, 0x00, 0x05, 0x62, 0x0b,
	0x36, 0x4b, 0xb7, 0x50, 0x01, 0xf6, 0xbe, 0xb4, 0x60, 0xfe, 0x90, 0x11, 0x1d, 0xc1, 0xff, 0xe3,
	0x93, 0xeb, 0x71, 0xc9, 0x54, 0x99, 0xdc, 0x30, 0xf3, 0x69, 0x05, 0x90, 0x92, 0xe2, 0x12, 0xe3,
	0xf3, 0x64, 0x86, 0xc4, 0x18, 0x68, 0x96, 0x44, 0xe9, 0xe1, 0xe8, 0x17, 0xb0, 0x56, 0x3e, 0x70,
	0x66, 0x15, 0x5a, 0x06, 0x36, 0xf7, 0x6b, 0x80, 0x0b, 0xe9, 0x08, 0x56, 0xa6, 0xa7, 0xd0, 0x76,
	0x05, 0x26, 0x0e, 0x34, 0xdd, 0x8a, 0xc0, 0x99, 0x9d, 0x16, 0x33, 0xa9, 0x4a, 0xa7, 0x0a, 0x5c,
	0xa9, 0xd3, 0x49, 0x67, 0x4e, 0x49, 0x17, 0x63, 0xaa, 0x8a, 0xb4, 0x02, 0x57, 0x92, 0x9e, 0x34,
	0xbc, 0xce, 0xe0, 0x7e, 0xd9, 0xb8, 0x79, 0x52, 0xe5, 0xc0, 0x04, 0xd4, 0xec, 0x54, 0x86, 0x16,
	0xa2, 0x09, 0xe8, 0x25, 0x33, 0x68, 0xa7, 0x02, 0x91, 0x40, 0x9a, 0xcf, 0xaa, 0x22, 0x95, 0x62,
	0xf7, 0xdd, 0xe5, 0x2f, 0xab, 0xf1, 0x75, 0x64, 0x35, 0x2e, 0x47, 0x96, 0x76, 0x35, 0xb2, 0xb4,
	0x9f, 0x23, 0x4b, 0xfb, 0x7c, 0x63, 0x35, 0xae, 0x6e, 0xac, 0xc6, 0x8f, 0x1b, 0xab, 0xf1, 0x7e,
	0xf7, 0xf6, 0xb4, 0xe6, 0xec, 0x1e, 0x8d, 0x49, 0x8a, 0x19, 0x73, 0x09, 0xdd, 0xcd, 0xef, 0x31,
	0xe7, 0xe2, 0x26, 0x23, 0x06, 0xf7, 0x60, 0x51, 0x5c, 0x51, 0xf6, 0xff, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x7d, 0x26, 0xf4, 0xe2, 0x28, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateThought(ctx context.Context, in *MsgCreateThought, opts ...grpc.CallOption) (*MsgCreateThoughtResponse, error)
	ForgetThought(ctx context.Context, in *MsgForgetThought, opts ...grpc.CallOption) (*MsgForgetThoughtResponse, error)
	ChangeThoughtParticle(ctx context.Context, in *MsgChangeThoughtParticle, opts ...grpc.CallOption) (*MsgChangeThoughtParticleResponse, error)
	ChangeThoughtName(ctx context.Context, in *MsgChangeThoughtName, opts ...grpc.CallOption) (*MsgChangeThoughtNameResponse, error)
	ChangeThoughtCallData(ctx context.Context, in *MsgChangeThoughtCallData, opts ...grpc.CallOption) (*MsgChangeThoughtCallDataResponse, error)
	ChangeThoughtGasPrice(ctx context.Context, in *MsgChangeThoughtGasPrice, opts ...grpc.CallOption) (*MsgChangeThoughtGasPriceResponse, error)
	ChangeThoughtPeriod(ctx context.Context, in *MsgChangeThoughtPeriod, opts ...grpc.CallOption) (*MsgChangeThoughtPeriodResponse, error)
	ChangeThoughtBlock(ctx context.Context, in *MsgChangeThoughtBlock, opts ...grpc.CallOption) (*MsgChangeThoughtBlockResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateThought(ctx context.Context, in *MsgCreateThought, opts ...grpc.CallOption) (*MsgCreateThoughtResponse, error) {
	out := new(MsgCreateThoughtResponse)
	err := c.cc.Invoke(ctx, "/cyber.dmn.v1beta1.Msg/CreateThought", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ForgetThought(ctx context.Context, in *MsgForgetThought, opts ...grpc.CallOption) (*MsgForgetThoughtResponse, error) {
	out := new(MsgForgetThoughtResponse)
	err := c.cc.Invoke(ctx, "/cyber.dmn.v1beta1.Msg/ForgetThought", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeThoughtParticle(ctx context.Context, in *MsgChangeThoughtParticle, opts ...grpc.CallOption) (*MsgChangeThoughtParticleResponse, error) {
	out := new(MsgChangeThoughtParticleResponse)
	err := c.cc.Invoke(ctx, "/cyber.dmn.v1beta1.Msg/ChangeThoughtParticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeThoughtName(ctx context.Context, in *MsgChangeThoughtName, opts ...grpc.CallOption) (*MsgChangeThoughtNameResponse, error) {
	out := new(MsgChangeThoughtNameResponse)
	err := c.cc.Invoke(ctx, "/cyber.dmn.v1beta1.Msg/ChangeThoughtName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeThoughtCallData(ctx context.Context, in *MsgChangeThoughtCallData, opts ...grpc.CallOption) (*MsgChangeThoughtCallDataResponse, error) {
	out := new(MsgChangeThoughtCallDataResponse)
	err := c.cc.Invoke(ctx, "/cyber.dmn.v1beta1.Msg/ChangeThoughtCallData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeThoughtGasPrice(ctx context.Context, in *MsgChangeThoughtGasPrice, opts ...grpc.CallOption) (*MsgChangeThoughtGasPriceResponse, error) {
	out := new(MsgChangeThoughtGasPriceResponse)
	err := c.cc.Invoke(ctx, "/cyber.dmn.v1beta1.Msg/ChangeThoughtGasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeThoughtPeriod(ctx context.Context, in *MsgChangeThoughtPeriod, opts ...grpc.CallOption) (*MsgChangeThoughtPeriodResponse, error) {
	out := new(MsgChangeThoughtPeriodResponse)
	err := c.cc.Invoke(ctx, "/cyber.dmn.v1beta1.Msg/ChangeThoughtPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeThoughtBlock(ctx context.Context, in *MsgChangeThoughtBlock, opts ...grpc.CallOption) (*MsgChangeThoughtBlockResponse, error) {
	out := new(MsgChangeThoughtBlockResponse)
	err := c.cc.Invoke(ctx, "/cyber.dmn.v1beta1.Msg/ChangeThoughtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateThought(context.Context, *MsgCreateThought) (*MsgCreateThoughtResponse, error)
	ForgetThought(context.Context, *MsgForgetThought) (*MsgForgetThoughtResponse, error)
	ChangeThoughtParticle(context.Context, *MsgChangeThoughtParticle) (*MsgChangeThoughtParticleResponse, error)
	ChangeThoughtName(context.Context, *MsgChangeThoughtName) (*MsgChangeThoughtNameResponse, error)
	ChangeThoughtCallData(context.Context, *MsgChangeThoughtCallData) (*MsgChangeThoughtCallDataResponse, error)
	ChangeThoughtGasPrice(context.Context, *MsgChangeThoughtGasPrice) (*MsgChangeThoughtGasPriceResponse, error)
	ChangeThoughtPeriod(context.Context, *MsgChangeThoughtPeriod) (*MsgChangeThoughtPeriodResponse, error)
	ChangeThoughtBlock(context.Context, *MsgChangeThoughtBlock) (*MsgChangeThoughtBlockResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateThought(ctx context.Context, req *MsgCreateThought) (*MsgCreateThoughtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThought not implemented")
}
func (*UnimplementedMsgServer) ForgetThought(ctx context.Context, req *MsgForgetThought) (*MsgForgetThoughtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetThought not implemented")
}
func (*UnimplementedMsgServer) ChangeThoughtParticle(ctx context.Context, req *MsgChangeThoughtParticle) (*MsgChangeThoughtParticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeThoughtParticle not implemented")
}
func (*UnimplementedMsgServer) ChangeThoughtName(ctx context.Context, req *MsgChangeThoughtName) (*MsgChangeThoughtNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeThoughtName not implemented")
}
func (*UnimplementedMsgServer) ChangeThoughtCallData(ctx context.Context, req *MsgChangeThoughtCallData) (*MsgChangeThoughtCallDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeThoughtCallData not implemented")
}
func (*UnimplementedMsgServer) ChangeThoughtGasPrice(ctx context.Context, req *MsgChangeThoughtGasPrice) (*MsgChangeThoughtGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeThoughtGasPrice not implemented")
}
func (*UnimplementedMsgServer) ChangeThoughtPeriod(ctx context.Context, req *MsgChangeThoughtPeriod) (*MsgChangeThoughtPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeThoughtPeriod not implemented")
}
func (*UnimplementedMsgServer) ChangeThoughtBlock(ctx context.Context, req *MsgChangeThoughtBlock) (*MsgChangeThoughtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeThoughtBlock not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateThought_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateThought)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateThought(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.dmn.v1beta1.Msg/CreateThought",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateThought(ctx, req.(*MsgCreateThought))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ForgetThought_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgForgetThought)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ForgetThought(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.dmn.v1beta1.Msg/ForgetThought",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ForgetThought(ctx, req.(*MsgForgetThought))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeThoughtParticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeThoughtParticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeThoughtParticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.dmn.v1beta1.Msg/ChangeThoughtParticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeThoughtParticle(ctx, req.(*MsgChangeThoughtParticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeThoughtName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeThoughtName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeThoughtName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.dmn.v1beta1.Msg/ChangeThoughtName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeThoughtName(ctx, req.(*MsgChangeThoughtName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeThoughtCallData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeThoughtCallData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeThoughtCallData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.dmn.v1beta1.Msg/ChangeThoughtCallData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeThoughtCallData(ctx, req.(*MsgChangeThoughtCallData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeThoughtGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeThoughtGasPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeThoughtGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.dmn.v1beta1.Msg/ChangeThoughtGasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeThoughtGasPrice(ctx, req.(*MsgChangeThoughtGasPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeThoughtPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeThoughtPeriod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeThoughtPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.dmn.v1beta1.Msg/ChangeThoughtPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeThoughtPeriod(ctx, req.(*MsgChangeThoughtPeriod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeThoughtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeThoughtBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeThoughtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.dmn.v1beta1.Msg/ChangeThoughtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeThoughtBlock(ctx, req.(*MsgChangeThoughtBlock))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cyber.dmn.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateThought",
			Handler:    _Msg_CreateThought_Handler,
		},
		{
			MethodName: "ForgetThought",
			Handler:    _Msg_ForgetThought_Handler,
		},
		{
			MethodName: "ChangeThoughtParticle",
			Handler:    _Msg_ChangeThoughtParticle_Handler,
		},
		{
			MethodName: "ChangeThoughtName",
			Handler:    _Msg_ChangeThoughtName_Handler,
		},
		{
			MethodName: "ChangeThoughtCallData",
			Handler:    _Msg_ChangeThoughtCallData_Handler,
		},
		{
			MethodName: "ChangeThoughtGasPrice",
			Handler:    _Msg_ChangeThoughtGasPrice_Handler,
		},
		{
			MethodName: "ChangeThoughtPeriod",
			Handler:    _Msg_ChangeThoughtPeriod_Handler,
		},
		{
			MethodName: "ChangeThoughtBlock",
			Handler:    _Msg_ChangeThoughtBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cyber/dmn/v1beta1/tx.proto",
}

func (m *MsgCreateThought) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateThought) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateThought) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Particle) > 0 {
		i -= len(m.Particle)
		copy(dAtA[i:], m.Particle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Particle)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Load.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Trigger.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgForgetThought) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgForgetThought) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgForgetThought) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeThoughtParticle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeThoughtParticle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeThoughtParticle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Particle) > 0 {
		i -= len(m.Particle)
		copy(dAtA[i:], m.Particle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Particle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeThoughtName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeThoughtName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeThoughtName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewName) > 0 {
		i -= len(m.NewName)
		copy(dAtA[i:], m.NewName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeThoughtCallData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeThoughtCallData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeThoughtCallData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CallData) > 0 {
		i -= len(m.CallData)
		copy(dAtA[i:], m.CallData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CallData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeThoughtGasPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeThoughtGasPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeThoughtGasPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GasPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeThoughtPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeThoughtPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeThoughtPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Period != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeThoughtBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeThoughtBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeThoughtBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateThoughtResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateThoughtResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateThoughtResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgForgetThoughtResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgForgetThoughtResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgForgetThoughtResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeThoughtParticleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeThoughtParticleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeThoughtParticleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeThoughtNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeThoughtNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeThoughtNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeThoughtCallDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeThoughtCallDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeThoughtCallDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeThoughtGasPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeThoughtGasPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeThoughtGasPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeThoughtPeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeThoughtPeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeThoughtPeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeThoughtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeThoughtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeThoughtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateThought) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Trigger.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Load.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Particle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgForgetThought) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangeThoughtParticle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Particle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangeThoughtName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangeThoughtCallData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CallData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangeThoughtGasPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.GasPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgChangeThoughtPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Period != 0 {
		n += 1 + sovTx(uint64(m.Period))
	}
	return n
}

func (m *MsgChangeThoughtBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Block != 0 {
		n += 1 + sovTx(uint64(m.Block))
	}
	return n
}

func (m *MsgCreateThoughtResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgForgetThoughtResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeThoughtParticleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeThoughtNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeThoughtCallDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeThoughtGasPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeThoughtPeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeThoughtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateThought) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateThought: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateThought: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trigger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Trigger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Load.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Particle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Particle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgForgetThought) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgForgetThought: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgForgetThought: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeThoughtParticle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeThoughtParticle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeThoughtParticle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Particle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Particle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeThoughtName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeThoughtName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeThoughtName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeThoughtCallData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeThoughtCallData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeThoughtCallData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeThoughtGasPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeThoughtGasPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeThoughtGasPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeThoughtPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeThoughtPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeThoughtPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeThoughtBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeThoughtBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeThoughtBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateThoughtResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateThoughtResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateThoughtResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgForgetThoughtResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgForgetThoughtResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgForgetThoughtResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeThoughtParticleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeThoughtParticleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeThoughtParticleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeThoughtNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeThoughtNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeThoughtNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeThoughtCallDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeThoughtCallDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeThoughtCallDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeThoughtGasPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeThoughtGasPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeThoughtGasPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeThoughtPeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeThoughtPeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeThoughtPeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeThoughtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeThoughtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeThoughtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
