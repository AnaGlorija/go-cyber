// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cyber/graph/v1beta1/graph.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCyberlink struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address" yaml:"address"`
	Links   []Link `protobuf:"bytes,2,rep,name=links,proto3" json:"links" yaml:"links"`
}

func (m *MsgCyberlink) Reset()         { *m = MsgCyberlink{} }
func (m *MsgCyberlink) String() string { return proto.CompactTextString(m) }
func (*MsgCyberlink) ProtoMessage()    {}
func (*MsgCyberlink) Descriptor() ([]byte, []int) {
	return fileDescriptor_939b92d7e41f6743, []int{0}
}
func (m *MsgCyberlink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCyberlink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCyberlink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCyberlink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCyberlink.Merge(m, src)
}
func (m *MsgCyberlink) XXX_Size() int {
	return m.Size()
}
func (m *MsgCyberlink) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCyberlink.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCyberlink proto.InternalMessageInfo

type MsgCyberlinkResponse struct {
}

func (m *MsgCyberlinkResponse) Reset()         { *m = MsgCyberlinkResponse{} }
func (m *MsgCyberlinkResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCyberlinkResponse) ProtoMessage()    {}
func (*MsgCyberlinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_939b92d7e41f6743, []int{1}
}
func (m *MsgCyberlinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCyberlinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCyberlinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCyberlinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCyberlinkResponse.Merge(m, src)
}
func (m *MsgCyberlinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCyberlinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCyberlinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCyberlinkResponse proto.InternalMessageInfo

type Link struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	To   string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty" yaml:"to"`
}

func (m *Link) Reset()         { *m = Link{} }
func (m *Link) String() string { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()    {}
func (*Link) Descriptor() ([]byte, []int) {
	return fileDescriptor_939b92d7e41f6743, []int{2}
}
func (m *Link) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Link) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Link.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Link) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Link.Merge(m, src)
}
func (m *Link) XXX_Size() int {
	return m.Size()
}
func (m *Link) XXX_DiscardUnknown() {
	xxx_messageInfo_Link.DiscardUnknown(m)
}

var xxx_messageInfo_Link proto.InternalMessageInfo

type CompactLink struct {
	From    uint64 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To      uint64 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	Account uint64 `protobuf:"varint,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *CompactLink) Reset()         { *m = CompactLink{} }
func (m *CompactLink) String() string { return proto.CompactTextString(m) }
func (*CompactLink) ProtoMessage()    {}
func (*CompactLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_939b92d7e41f6743, []int{3}
}
func (m *CompactLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactLink.Merge(m, src)
}
func (m *CompactLink) XXX_Size() int {
	return m.Size()
}
func (m *CompactLink) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactLink.DiscardUnknown(m)
}

var xxx_messageInfo_CompactLink proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCyberlink)(nil), "cyber.graph.v1beta1.MsgCyberlink")
	proto.RegisterType((*MsgCyberlinkResponse)(nil), "cyber.graph.v1beta1.MsgCyberlinkResponse")
	proto.RegisterType((*Link)(nil), "cyber.graph.v1beta1.Link")
	proto.RegisterType((*CompactLink)(nil), "cyber.graph.v1beta1.CompactLink")
}

func init() { proto.RegisterFile("cyber/graph/v1beta1/graph.proto", fileDescriptor_939b92d7e41f6743) }

var fileDescriptor_939b92d7e41f6743 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xb1, 0xae, 0xda, 0x30,
	0x14, 0x86, 0x93, 0x90, 0x96, 0x62, 0x28, 0x95, 0x5c, 0x54, 0xa5, 0x48, 0xc4, 0xd4, 0x5d, 0xe8,
	0xd0, 0x44, 0xd0, 0xa1, 0x12, 0x23, 0x4c, 0x95, 0x4a, 0x87, 0xa8, 0x1d, 0xda, 0xa9, 0x49, 0x48,
	0x0d, 0x82, 0xc4, 0x51, 0x6c, 0xaa, 0xf2, 0x06, 0x1d, 0xfb, 0x08, 0xf4, 0x6d, 0x18, 0x19, 0xef,
	0x14, 0x5d, 0xc1, 0x72, 0xc5, 0x98, 0x27, 0xb8, 0x8a, 0x9d, 0x5c, 0x32, 0x20, 0xdd, 0xcd, 0xe7,
	0x3f, 0xff, 0xf9, 0x7c, 0x7c, 0x7c, 0x00, 0xf2, 0xb7, 0x5e, 0x90, 0xd8, 0x24, 0x71, 0xe3, 0x85,
	0xfd, 0x7b, 0xe8, 0x05, 0xdc, 0x1d, 0xca, 0xc8, 0x8a, 0x13, 0xca, 0x29, 0x7c, 0x29, 0x0c, 0x96,
	0x94, 0x0a, 0x43, 0xb7, 0x43, 0x28, 0xa1, 0x22, 0x6f, 0xe7, 0x27, 0x69, 0xc5, 0xff, 0x55, 0xd0,
	0x9a, 0x31, 0x32, 0xcd, 0x0b, 0xd6, 0xcb, 0x68, 0x05, 0x3f, 0x82, 0xba, 0x3b, 0x9f, 0x27, 0x01,
	0x63, 0x86, 0xda, 0x57, 0x07, 0x8d, 0x49, 0xef, 0x9c, 0xa2, 0x52, 0xca, 0x52, 0xd4, 0xde, 0xba,
	0xe1, 0x7a, 0x8c, 0x0b, 0x01, 0x3b, 0x65, 0x0a, 0x7e, 0x01, 0x4f, 0x72, 0x00, 0x33, 0xb4, 0x7e,
	0x6d, 0xd0, 0x1c, 0xbd, 0xb6, 0xae, 0x34, 0x61, 0x7d, 0x5e, 0x46, 0xab, 0x49, 0x6f, 0x9f, 0x22,
	0xe5, 0x9c, 0x22, 0xe9, 0xcf, 0x52, 0xd4, 0x92, 0x4c, 0x11, 0x62, 0x47, 0xca, 0xe3, 0x67, 0x7f,
	0x77, 0x48, 0xb9, 0xdb, 0x21, 0x05, 0xbf, 0x02, 0x9d, 0x6a, 0x8b, 0x4e, 0xc0, 0x62, 0x1a, 0xb1,
	0x00, 0x7f, 0x05, 0x7a, 0xce, 0x83, 0x6f, 0x81, 0xfe, 0x2b, 0xa1, 0x61, 0xd1, 0xef, 0x8b, 0x2c,
	0x45, 0x4d, 0x09, 0xcc, 0x55, 0xec, 0x88, 0x24, 0xec, 0x01, 0x8d, 0x53, 0x43, 0x13, 0x96, 0xe7,
	0x59, 0x8a, 0x1a, 0xd2, 0xc2, 0x29, 0x76, 0x34, 0x4e, 0x2b, 0xb7, 0x7d, 0x03, 0xcd, 0x29, 0x0d,
	0x63, 0xd7, 0xe7, 0x02, 0x0e, 0x2b, 0x70, 0xbd, 0x60, 0xb5, 0x1f, 0x58, 0x7a, 0x5e, 0x0c, 0x0d,
	0x50, 0x77, 0x7d, 0x9f, 0x6e, 0x22, 0x6e, 0xd4, 0x84, 0x58, 0x86, 0x17, 0xec, 0xe8, 0x27, 0xa8,
	0xcd, 0x18, 0x81, 0xdf, 0x41, 0xe3, 0x32, 0xeb, 0x37, 0x57, 0x67, 0x54, 0x7d, 0x6b, 0xf7, 0xdd,
	0xa3, 0x96, 0x72, 0x1c, 0x93, 0x4f, 0xfb, 0xa3, 0xa9, 0x1e, 0x8e, 0xa6, 0x7a, 0x7b, 0x34, 0xd5,
	0x7f, 0x27, 0x53, 0x39, 0x9c, 0x4c, 0xe5, 0xe6, 0x64, 0x2a, 0x3f, 0x6c, 0xb2, 0xe4, 0x8b, 0x8d,
	0x67, 0xf9, 0x34, 0xb4, 0x05, 0xce, 0xa7, 0x11, 0xc9, 0x3f, 0xcd, 0x26, 0xf4, 0xbd, 0x5c, 0xa6,
	0x3f, 0xc5, 0x3a, 0xf1, 0x6d, 0x1c, 0x30, 0xef, 0xa9, 0x58, 0x8e, 0x0f, 0xf7, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x0f, 0x1b, 0xe3, 0x0a, 0x6a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	Cyberlink(ctx context.Context, in *MsgCyberlink, opts ...grpc.CallOption) (*MsgCyberlinkResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Cyberlink(ctx context.Context, in *MsgCyberlink, opts ...grpc.CallOption) (*MsgCyberlinkResponse, error) {
	out := new(MsgCyberlinkResponse)
	err := c.cc.Invoke(ctx, "/cyber.graph.v1beta1.Msg/Cyberlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	Cyberlink(context.Context, *MsgCyberlink) (*MsgCyberlinkResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Cyberlink(ctx context.Context, req *MsgCyberlink) (*MsgCyberlinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cyberlink not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Cyberlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCyberlink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Cyberlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.graph.v1beta1.Msg/Cyberlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Cyberlink(ctx, req.(*MsgCyberlink))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cyber.graph.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cyberlink",
			Handler:    _Msg_Cyberlink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cyber/graph/v1beta1/graph.proto",
}

func (m *MsgCyberlink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCyberlink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCyberlink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Links) > 0 {
		for iNdEx := len(m.Links) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Links[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGraph(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGraph(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCyberlinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCyberlinkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCyberlinkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Link) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Link) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Link) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintGraph(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintGraph(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompactLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.Account))
		i--
		dAtA[i] = 0x18
	}
	if m.To != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.To))
		i--
		dAtA[i] = 0x10
	}
	if m.From != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGraph(dAtA []byte, offset int, v uint64) int {
	offset -= sovGraph(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCyberlink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGraph(uint64(l))
	}
	if len(m.Links) > 0 {
		for _, e := range m.Links {
			l = e.Size()
			n += 1 + l + sovGraph(uint64(l))
		}
	}
	return n
}

func (m *MsgCyberlinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Link) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovGraph(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovGraph(uint64(l))
	}
	return n
}

func (m *CompactLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovGraph(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovGraph(uint64(m.To))
	}
	if m.Account != 0 {
		n += 1 + sovGraph(uint64(m.Account))
	}
	return n
}

func sovGraph(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGraph(x uint64) (n int) {
	return sovGraph(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCyberlink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCyberlink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCyberlink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Links = append(m.Links, Link{})
			if err := m.Links[len(m.Links)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCyberlinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCyberlinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCyberlinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Link) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Link: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Link: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			m.Account = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Account |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGraph(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGraph
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGraph
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGraph
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGraph        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGraph          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGraph = fmt.Errorf("proto: unexpected end of group")
)
